{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNybUx3Ogwvwt5xrRL/TOTQ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shahhazik/quantium-retail-analytics/blob/main/Retail%20Analytics\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "imerN01eltLk",
        "outputId": "e600836b-abe8-4706-9a0c-247806e0d135"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: openpyxl in /usr/local/lib/python3.12/dist-packages (3.1.5)\n",
            "Requirement already satisfied: et-xmlfile in /usr/local/lib/python3.12/dist-packages (from openpyxl) (2.0.0)\n"
          ]
        }
      ],
      "source": [
        "# Install required package for Excel\n",
        "!pip install openpyxl\n",
        "\n",
        "# Import libraries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# Display settings\n",
        "pd.set_option('display.max_columns', None)\n",
        "sns.set(style=\"whitegrid\")\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 108
        },
        "id": "u9tag1fXmBrM",
        "outputId": "81364456-5138-4a5c-8a3b-9ce21f8adf45"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-14704224-e646-4207-9f03-878ccaea5a90\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-14704224-e646-4207-9f03-878ccaea5a90\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving QVI_transaction_data.xlsx to QVI_transaction_data.xlsx\n",
            "Saving QVI_purchase_behaviour.csv to QVI_purchase_behaviour.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load Excel transaction data\n",
        "trans = pd.read_excel('QVI_transaction_data.xlsx', engine='openpyxl')\n",
        "\n",
        "# Load CSV customer data\n",
        "cust = pd.read_csv('QVI_purchase_behaviour.csv', encoding='ISO-8859-1')\n"
      ],
      "metadata": {
        "id": "jo0yJC1rmvfD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Check structure\n",
        "print(trans.info())\n",
        "print(cust.info())\n",
        "\n",
        "# Missing values\n",
        "print(trans.isnull().sum())\n",
        "print(cust.isnull().sum())\n",
        "\n",
        "# Sample preview\n",
        "trans.head()\n",
        "cust.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 930
        },
        "id": "W3tNBi9Hm8zb",
        "outputId": "4aadcc74-826d-48f1-cc93-9769cf88765d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 264836 entries, 0 to 264835\n",
            "Data columns (total 8 columns):\n",
            " #   Column          Non-Null Count   Dtype  \n",
            "---  ------          --------------   -----  \n",
            " 0   DATE            264836 non-null  int64  \n",
            " 1   STORE_NBR       264836 non-null  int64  \n",
            " 2   LYLTY_CARD_NBR  264836 non-null  int64  \n",
            " 3   TXN_ID          264836 non-null  int64  \n",
            " 4   PROD_NBR        264836 non-null  int64  \n",
            " 5   PROD_NAME       264836 non-null  object \n",
            " 6   PROD_QTY        264836 non-null  int64  \n",
            " 7   TOT_SALES       264836 non-null  float64\n",
            "dtypes: float64(1), int64(6), object(1)\n",
            "memory usage: 16.2+ MB\n",
            "None\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 72637 entries, 0 to 72636\n",
            "Data columns (total 3 columns):\n",
            " #   Column            Non-Null Count  Dtype \n",
            "---  ------            --------------  ----- \n",
            " 0   LYLTY_CARD_NBR    72637 non-null  int64 \n",
            " 1   LIFESTAGE         72637 non-null  object\n",
            " 2   PREMIUM_CUSTOMER  72637 non-null  object\n",
            "dtypes: int64(1), object(2)\n",
            "memory usage: 1.7+ MB\n",
            "None\n",
            "DATE              0\n",
            "STORE_NBR         0\n",
            "LYLTY_CARD_NBR    0\n",
            "TXN_ID            0\n",
            "PROD_NBR          0\n",
            "PROD_NAME         0\n",
            "PROD_QTY          0\n",
            "TOT_SALES         0\n",
            "dtype: int64\n",
            "LYLTY_CARD_NBR      0\n",
            "LIFESTAGE           0\n",
            "PREMIUM_CUSTOMER    0\n",
            "dtype: int64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   LYLTY_CARD_NBR               LIFESTAGE PREMIUM_CUSTOMER\n",
              "0            1000   YOUNG SINGLES/COUPLES          Premium\n",
              "1            1002   YOUNG SINGLES/COUPLES       Mainstream\n",
              "2            1003          YOUNG FAMILIES           Budget\n",
              "3            1004   OLDER SINGLES/COUPLES       Mainstream\n",
              "4            1005  MIDAGE SINGLES/COUPLES       Mainstream"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f9570f99-8407-4a9a-9246-bf2e0121cf48\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>LYLTY_CARD_NBR</th>\n",
              "      <th>LIFESTAGE</th>\n",
              "      <th>PREMIUM_CUSTOMER</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1000</td>\n",
              "      <td>YOUNG SINGLES/COUPLES</td>\n",
              "      <td>Premium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1002</td>\n",
              "      <td>YOUNG SINGLES/COUPLES</td>\n",
              "      <td>Mainstream</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1003</td>\n",
              "      <td>YOUNG FAMILIES</td>\n",
              "      <td>Budget</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1004</td>\n",
              "      <td>OLDER SINGLES/COUPLES</td>\n",
              "      <td>Mainstream</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1005</td>\n",
              "      <td>MIDAGE SINGLES/COUPLES</td>\n",
              "      <td>Mainstream</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f9570f99-8407-4a9a-9246-bf2e0121cf48')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f9570f99-8407-4a9a-9246-bf2e0121cf48 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f9570f99-8407-4a9a-9246-bf2e0121cf48');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1c0b58e4-999e-4aa8-9784-6997a4e7700d\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1c0b58e4-999e-4aa8-9784-6997a4e7700d')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1c0b58e4-999e-4aa8-9784-6997a4e7700d button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "cust",
              "summary": "{\n  \"name\": \"cust\",\n  \"rows\": 72637,\n  \"fields\": [\n    {\n      \"column\": \"LYLTY_CARD_NBR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 89892,\n        \"min\": 1000,\n        \"max\": 2373711,\n        \"num_unique_values\": 72637,\n        \"samples\": [\n          34250,\n          224159,\n          107092\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LIFESTAGE\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"YOUNG SINGLES/COUPLES\",\n          \"YOUNG FAMILIES\",\n          \"OLDER FAMILIES\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PREMIUM_CUSTOMER\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Premium\",\n          \"Mainstream\",\n          \"Budget\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Brand from PROD_NAME\n",
        "trans['BRAND'] = trans['PROD_NAME'].str.split().str[0]\n",
        "\n",
        "# Pack size from PROD_NAME\n",
        "trans['PACK_SIZE'] = trans['PROD_NAME'].str.extract(r'(\\d+)(?=g)')\n",
        "trans['PACK_SIZE'] = pd.to_numeric(trans['PACK_SIZE'], errors='coerce')\n"
      ],
      "metadata": {
        "id": "q9-e8mb0nCFx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.merge(trans, cust, on='LYLTY_CARD_NBR', how='left')\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 293
        },
        "id": "fE92u09RnJIl",
        "outputId": "b9df3d66-52bd-402d-ad90-6fe36b6e0193"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    DATE  STORE_NBR  LYLTY_CARD_NBR  TXN_ID  PROD_NBR  \\\n",
              "0  43390          1            1000       1         5   \n",
              "1  43599          1            1307     348        66   \n",
              "2  43605          1            1343     383        61   \n",
              "3  43329          2            2373     974        69   \n",
              "4  43330          2            2426    1038       108   \n",
              "\n",
              "                                  PROD_NAME  PROD_QTY  TOT_SALES    BRAND  \\\n",
              "0    Natural Chip        Compny SeaSalt175g         2        6.0  Natural   \n",
              "1                  CCs Nacho Cheese    175g         3        6.3      CCs   \n",
              "2    Smiths Crinkle Cut  Chips Chicken 170g         2        2.9   Smiths   \n",
              "3    Smiths Chip Thinly  S/Cream&Onion 175g         5       15.0   Smiths   \n",
              "4  Kettle Tortilla ChpsHny&Jlpno Chili 150g         3       13.8   Kettle   \n",
              "\n",
              "   PACK_SIZE               LIFESTAGE PREMIUM_CUSTOMER  \n",
              "0      175.0   YOUNG SINGLES/COUPLES          Premium  \n",
              "1      175.0  MIDAGE SINGLES/COUPLES           Budget  \n",
              "2      170.0  MIDAGE SINGLES/COUPLES           Budget  \n",
              "3      175.0  MIDAGE SINGLES/COUPLES           Budget  \n",
              "4      150.0  MIDAGE SINGLES/COUPLES           Budget  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-141c089c-89d0-49b6-86d2-5fa186801d88\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DATE</th>\n",
              "      <th>STORE_NBR</th>\n",
              "      <th>LYLTY_CARD_NBR</th>\n",
              "      <th>TXN_ID</th>\n",
              "      <th>PROD_NBR</th>\n",
              "      <th>PROD_NAME</th>\n",
              "      <th>PROD_QTY</th>\n",
              "      <th>TOT_SALES</th>\n",
              "      <th>BRAND</th>\n",
              "      <th>PACK_SIZE</th>\n",
              "      <th>LIFESTAGE</th>\n",
              "      <th>PREMIUM_CUSTOMER</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>43390</td>\n",
              "      <td>1</td>\n",
              "      <td>1000</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>Natural Chip        Compny SeaSalt175g</td>\n",
              "      <td>2</td>\n",
              "      <td>6.0</td>\n",
              "      <td>Natural</td>\n",
              "      <td>175.0</td>\n",
              "      <td>YOUNG SINGLES/COUPLES</td>\n",
              "      <td>Premium</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>43599</td>\n",
              "      <td>1</td>\n",
              "      <td>1307</td>\n",
              "      <td>348</td>\n",
              "      <td>66</td>\n",
              "      <td>CCs Nacho Cheese    175g</td>\n",
              "      <td>3</td>\n",
              "      <td>6.3</td>\n",
              "      <td>CCs</td>\n",
              "      <td>175.0</td>\n",
              "      <td>MIDAGE SINGLES/COUPLES</td>\n",
              "      <td>Budget</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>43605</td>\n",
              "      <td>1</td>\n",
              "      <td>1343</td>\n",
              "      <td>383</td>\n",
              "      <td>61</td>\n",
              "      <td>Smiths Crinkle Cut  Chips Chicken 170g</td>\n",
              "      <td>2</td>\n",
              "      <td>2.9</td>\n",
              "      <td>Smiths</td>\n",
              "      <td>170.0</td>\n",
              "      <td>MIDAGE SINGLES/COUPLES</td>\n",
              "      <td>Budget</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>43329</td>\n",
              "      <td>2</td>\n",
              "      <td>2373</td>\n",
              "      <td>974</td>\n",
              "      <td>69</td>\n",
              "      <td>Smiths Chip Thinly  S/Cream&amp;Onion 175g</td>\n",
              "      <td>5</td>\n",
              "      <td>15.0</td>\n",
              "      <td>Smiths</td>\n",
              "      <td>175.0</td>\n",
              "      <td>MIDAGE SINGLES/COUPLES</td>\n",
              "      <td>Budget</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>43330</td>\n",
              "      <td>2</td>\n",
              "      <td>2426</td>\n",
              "      <td>1038</td>\n",
              "      <td>108</td>\n",
              "      <td>Kettle Tortilla ChpsHny&amp;Jlpno Chili 150g</td>\n",
              "      <td>3</td>\n",
              "      <td>13.8</td>\n",
              "      <td>Kettle</td>\n",
              "      <td>150.0</td>\n",
              "      <td>MIDAGE SINGLES/COUPLES</td>\n",
              "      <td>Budget</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-141c089c-89d0-49b6-86d2-5fa186801d88')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-141c089c-89d0-49b6-86d2-5fa186801d88 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-141c089c-89d0-49b6-86d2-5fa186801d88');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-67c238e1-33e0-4c23-b1a2-6b4497ba1417\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-67c238e1-33e0-4c23-b1a2-6b4497ba1417')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-67c238e1-33e0-4c23-b1a2-6b4497ba1417 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Total spend per segment\n",
        "spend = df.groupby(['LIFESTAGE', 'PREMIUM_CUSTOMER'])['TOT_SALES'].sum().reset_index()\n",
        "\n",
        "# Frequency\n",
        "freq = df.groupby(['LIFESTAGE', 'PREMIUM_CUSTOMER'])['TXN_ID'].count().reset_index(name='TRANSACTIONS')\n",
        "\n",
        "# Avg spend per transaction\n",
        "avg_spend = df.groupby(['LIFESTAGE', 'PREMIUM_CUSTOMER'])['TOT_SALES'].mean().reset_index(name='AVG_SPEND')\n",
        "\n",
        "# Avg pack size\n",
        "avg_pack = df.groupby(['LIFESTAGE', 'PREMIUM_CUSTOMER'])['PACK_SIZE'].mean().reset_index(name='AVG_PACK_SIZE')\n"
      ],
      "metadata": {
        "id": "r6B2eWTgnNVc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(12,6))\n",
        "sns.barplot(data=spend, x='LIFESTAGE', y='TOT_SALES', hue='PREMIUM_CUSTOMER')\n",
        "plt.title(\"Total Spend by Segment\")\n",
        "plt.xticks(rotation=45)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "1cji6EQAnSmi",
        "outputId": "516e55b3-cd7f-4b19-d3c6-620c55a1a41f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 715
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABB4AAAK6CAYAAACe+5/xAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQABAABJREFUeJzs3X98zfX///H7GTuzsY1p5LeNtsjGkJmt+RFhfpQiqbcfbWmVHxFFQt7ljZSUITOT9APpt1lSKr4k1Zt+SJE28pvIZvZ7O98/fPZ6O86wzY6zw+16ubhwXufxer4e5+y1XZz7nq/ny2SxWCwCAAAAAACwAxdHNwAAAAAAAK5dBA8AAAAAAMBuCB4AAAAAAIDdEDwAAAAAAAC7IXgAAAAAAAB2Q/AAAAAAAADshuABAAAAAADYDcEDAAAAAACwG4IHAAAAAABgNwQPAABcg7Zt26bAwEBt27bN0a3Y1eDBgzV48ODL1gUGBuq55567Ch0BAIALVXZ0AwAAXCsCAwNLVLd8+XKFhoZesmbRokVq2rSpunbtWh6tXdLu3bu1YMEC/fLLL/r7779VvXp1NW3aVF26dCnRh3r8z8GDB7VgwQJ9//33OnbsmLy8vNS4cWOFhoZq9OjRjm7vqsrKytKSJUvUrl27y57vAIBrG8EDAADlZPbs2VaPP/74Y23ZssVme5MmTS47Vnx8vLp372734GH79u0aMmSI6tatqwEDBsjX11dHjhzRTz/9pOXLlxM8lML+/fvVv39/ubm56Z577lH9+vV1/Phx7dq1SwkJCddl8DB//nyNHDmS4AEArnMEDwAAlJM777zT6vFPP/2kLVu22GyvSBYtWiRPT0+999578vLysnru5MmTDurKOS1btkyZmZn66KOPVK9ePavneC8BANcz1ngAAOAqyszM1KxZs9SxY0e1aNFC3bt3V2JioiwWi1ETGBiozMxMffjhhwoMDFRgYKAmTpwoSTp06JCmTZum7t27Kzg42JjCf/DgwTL189dff6lp06Y2oYMk1axZ0+px0ToJn3zyibp3766goCDdfffd+v777232PXbsmJ5++ml16NBBLVq0UK9evfTee+9Z1RStQ5GcnKzXXntNkZGRCgoK0tChQ7V//36bMVetWqWuXbsqODhY/fv31w8//FDq13up3r/99lsFBgbq888/t9lvzZo1CgwM1I4dOy469l9//aXatWvbhA6S7XspSRs3btT999+vVq1aKSQkRA8//LD++OMPm7pPP/1UUVFRCgoKUu/evfX5559r4sSJ6tKli1Fz8OBBBQYGKjExUW+//bZuv/12tWzZUtHR0Tpy5IgsFosWLFigyMhIBQcH69FHH9Xp06fL1NPEiRMVEhKiY8eO6bHHHlNISIjat2+vF154QQUFBUY/YWFhkqT58+cb53FcXNxF3z8AwLWLGQ8AAFwlFotFjz76qLZt26b+/furWbNm+n//7/9p9uzZOnbsmCZNmiTp3CUbkydPVnBwsO69915JUsOGDSVJv/zyi3bs2KFevXrpxhtv1KFDh7RixQoNGTJEa9eulbu7e6l6qlevnnbs2KE9e/YoICDgsvXff/+9kpOTNXjwYJnNZq1YsUIPPfSQVq9ebez/999/695775XJZNIDDzwgHx8fbdq0Sc8884wyMjI0bNgwqzETEhJkMpkUHR2tjIwMLVmyROPHj9fq1auNmtWrV2vq1KkKCQnR0KFDdeDAAT366KPy9vZWnTp1SvRaL9d7aGio6tSpozVr1qhbt25W+65Zs0YNGzZUSEjIJd/LrVu3auvWrcaH7ov56KOPNHHiREVERGj8+PHKysrSihUrdP/99+vDDz9U/fr1JUlff/21xo4dq4CAAI0bN05paWl65plnVLt27WLHXbNmjfLy8jR48GCdPn1aS5Ys0ZgxY9S+fXtt27ZNw4cP1/79+/XWW2/phRde0MyZM0vdkyQVFBQoJiZGwcHBeuqpp7R161YtXbpUDRo00P333y8fHx9NmzZN06ZNU7du3Yz3s6TroAAArjEWAABgF//+978tAQEBxuPPP//cEhAQYFm4cKFV3ahRoyyBgYGW/fv3G9tatWplmTBhgs2YWVlZNtt27NhhCQgIsHz44YfGtm+//dYSEBBg+fbbby/Z4+bNmy3NmjWzNGvWzDJw4EDL7NmzLf/v//0/S25urk1tQECAJSAgwPLLL78Y2w4dOmQJCgqyjBgxwtg2adIkS3h4uOXUqVNW+48dO9bSpk0b4zUU9dizZ09LTk6OUffGG29YAgICLLt377ZYLBZLbm6uJSwszHLnnXda1a1atcoSEBBg+de//nXJ11ia3ufMmWNp0aKFJT093dh28uRJS/PmzS3z5s275DH27NljCQ4OtgQEBFjuvPNOy/Tp0y2ff/65JTMz06ouIyPD0rZtW8vkyZOttp84ccLSpk0bq+29e/e2REZGWjIyMoxt27ZtswQEBFg6d+5sbDtw4IAlICDA0r59e6ve58yZYwkICLD07dvXkpeXZ2x/4oknLLfccovxfpampwkTJlgCAgIs8+fPt6q96667LP369bN63wICAi77vgEArn1cagEAwFWyadMmVapUyWbBxujoaFksFm3atOmyY1SpUsX4d15env755x81bNhQXl5e2rVrV6l7Cg8P18qVK9WlSxf9/vvvWrJkiWJiYhQZGakNGzbY1IeEhKhFixbG47p16+r222/X5s2bVVBQIIvFovXr16tLly6yWCw6deqU8SciIkJnzpzRr7/+ajXm3XffLbPZbDxu27atJOnAgQOSpJ07d+rkyZO67777rOr69esnT0/PEr/Wy/UunVunIzc3V+vWrTPqkpOTlZ+fr759+15y/JtuukkfffSR+vbtq0OHDmn58uUaMWKEOnTooHfffdeo++abb5Senq5evXpZvT8uLi5q2bKlcQvUY8eOac+ePbrrrrtUtWpVY/927dpddHZKjx49rN6T4OBgSVLfvn1VuXJlq+15eXk6duxYqXo636BBg6wet2nTpsyX/AAArm1cagEAwFVy6NAh1apVS9WqVbPaXnSXi0OHDl12jOzsbMXHx+uDDz7QsWPHrNaGOHPmTJn6Cg4O1vz585Wbm6vff/9dX3zxhZYtW6bHH39cH330kZo2bWrUNmrUyGb/xo0bKysry/igmp6erlWrVmnVqlXFHu/UqVNWj+vWrWv1uGi9ifT0dEnS4cOHiz22q6urGjRoUOLXebnefX191aRJEwUFBWnNmjUaMGCApHOXL7Rq1arY/S/k5+enF198UQUFBdq7d6++/vprLVmyRFOmTFH9+vXVoUMH7du3T5I0dOjQYscoOj+KXnfRZTYXvpbigqYLLzspCiEutj0tLU0NGjQocU9F3Nzc5OPjY7XN29tbaWlpxe4PALi+ETwAAOBEnn/+eX3wwQcaOnSoWrVqJU9PT5lMJo0dO9YqhCgLs9ms4OBgBQcHq3Hjxnr66ae1bt06jRw5ssRjFBYWSjr3G/Z+/foVW3Phdf4uLsVPwLzS11NWd911l/7zn//o6NGjys3N1Y8//qipU6eWaoxKlSoZCyq2atVKQ4YM0Zo1a9ShQwfjdc2ePVu+vr7F7ltWF9v3cu9xaXu6kh4BANcfggcAAK6SosUHMzIyrH6DnJKSYjx/OZ999pnuuusu4y4XkpSTk1Pm2Q4XU3RJwvHjx622F3e3iX379snd3d34DXjVqlVVWFioDh06lEsvRTMi9u/fb7VoY15eng4ePKibb765ROOUpHdJioqK0qxZs5SUlKTs7Gy5urqqZ8+eZe7/wveyaJZGzZo1L/keFb3uv/76q0Sv5UqUtKfSMJlM5TIOAMD5scYDAABXSWRkpAoKCvT2229bbV+2bJlMJpMiIyONbR4eHsalBucr7jfNb775prFGQWl9++23xc4s2LhxoyTJ39/favuOHTus1mg4cuSINmzYoPDwcFWqVEmVKlVS9+7d9dlnn2nPnj024154mUVJtGjRQj4+Plq5cqVyc3ON7R9++GGx79HFXK73Ij4+Prrtttv0ySefaM2aNYqIiLC5rKA4P/zwg/Ly8my2F72Xfn5+kqTbbrtN1apVU3x8fLH1Re9R7dq1FRAQoI8++khnz541nv/uu++KfW+vREl7Ko2iO6yU5msEALg2MeMBAICrpEuXLgoNDdXcuXN16NAhBQYGasuWLdqwYYOGDh1qdS3/Lbfcoq1bt+r1119XrVq1VL9+fbVs2VKdOnXSxx9/rGrVqqlp06b68ccf9c0336h69epl6mn69OnKyspSt27d5O/vr7y8PG3fvl2ffvqp6tWrp7vvvtuqPiAgQDExMVa3pJSkUaNGGTXjxo3Ttm3bdO+992rAgAFq2rSp0tLS9Ouvv2rr1q367rvvStWjq6urxowZo6lTp2ro0KGKiorSwYMH9cEHH5RqjYeS9F7krrvu0ujRoyVJjz/+eInGT0hI0K+//qpu3boZl5Ps2rVLH330kapXr26sn1CtWjVNmzZNTz31lO6++25FRUXJx8dHhw8f1saNG9W6dWvj0o6xY8fqscce06BBg3T33XcrPT1db7/9tgICAqzCiCtVmp5KqkqVKmratKk+/fRTNW7cWNWrV9dNN91Uotu2AgCuLQQPAABcJS4uLnrttdc0b948JScn64MPPlC9evX01FNPKTo62qp24sSJmjp1ql555RVlZ2erX79+atmypZ555hm5uLhozZo1ysnJUevWrfX666/roYceKlNPTz31lNatW6eNGzdq1apVysvLU926dXX//ffr0UcfNRZ6LHLrrbeqVatWWrBggQ4fPqymTZtq5syZVpc73HDDDVq9erUWLFigzz//XCtWrFD16tXVtGlTjR8/vkx9Dhw4UAUFBUpMTNTs2bMVEBCg1157Ta+++mqJxyhJ70U6d+4sb29vFRYW6vbbby/R+LGxsUpKStL333+vNWvWKDs7W76+vurVq5cee+wxq5CkT58+qlWrlhYvXqzExETl5uaqdu3aatu2rVXY06VLF7388suKi4vTnDlz1LhxY82cOVMfffSR/vjjjxK/9pIoaU+lMX36dD3//POaOXOm8vLyNHLkSIIHALgOmSyOWrkJAAA4lcDAQD3wwAOl/s23M8rPz9dtt92mzp07a8aMGY5ux8add94pHx8fvf76645uBQCAy2KNBwAAgAt88cUXOnXqlO666y6H9pGXl6f8/Hyrbdu2bdPvv/+udu3aOagrAABKh0stAAAA/s9PP/2k3bt3a+HChWrevLnDP9wfO3ZMDz74oPr27atatWopJSVFK1eulK+vr+677z6H9gYAQEkRPAAAAPyfFStW6JNPPtHNN9+sWbNmObodeXt765ZbbtHq1at16tQpeXh4qGPHjho/frxq1Kjh6PYAACgR1ngAAAAAAAB2wxoPAAAAAADAbggeAAAAAACA3bDGQwW3Y8cOWSwWubq6OroVAAAAAMB1IC8vTyaTSSEhIeUyHsFDBWexWMQyHAAAAACAq6W8P4MSPFRwRTMdgoKCHNwJAAAAAOB68Msvv5TreKzxAAAAAAAA7IbgAQAAAAAA2A3BAwAAAAAAsBuCBwAAAAAAYDcEDwAAAAAAwG64q8U1oqCgQHl5eY5uA7hqXF1dValSJUe3AQAAAOAyCB6cnMVi0dGjR3X69GlHtwJcddWrV9eNN94ok8nk6FYAAAAAXATBg5MrCh1q1aolDw8PPoDhumCxWJSZmanjx49LkurUqePgjgAAAABcDMGDEysoKDBCh5o1azq6HeCqcnd3lyQdP35ctWrV4rILAAAAoIJicUknVrSmg4eHh4M7ARyj6NxnfRMAAACg4iJ4uAZweQWuV5z7AAAAQMVH8AAAAAAAAOyG4AEAAAAAANgNwcM17oMPPlBgYKDxJygoSN27d9dzzz2nv//+W5K0bds2q5pmzZopLCxMo0eP1p9//mkz5sSJE63qLxy/yPnjfvzxx8X2d9999ykwMFC9e/e22t6lSxfFxsYajw8ePKjAwEAlJiYWO05iYqICAwN18OBBY9vgwYMVGBioO+64o9h9tmzZYvS3bt26i7yDF5eTk6Nly5ZpwIABatOmjdV7m5qaatRNnDhRISEhFx0nJCREEydOtNp28OBBPf300+ratauCgoIUHh6uBx54QPPmzZNk+3W92J8uXbpYjfvf//5XI0aMUIcOHdSiRQt16dJFU6dO1eHDh236iouLU2BgoG6++WYdOXLE5vmMjAwFBwcrMDBQzz33nFXvl+pp8eLFRm3R16joT3BwsPr06aNly5apsLDwMl8BAAAAAM6Au1pcJ0aPHq369esrNzdX//3vf7VixQpt3LhRSUlJRs3gwYMVFBSk/Px87d69WytXrtS2bduUlJQkX19fq/HMZrOmT59uc5zi7izg5uampKQk3XnnnVbbDx48qB07dsjNza2cXqUtNzc37d+/Xz///LOCg4OtnluzZo3c3NyUk5NT6nFPnTqlhx56SL/++qs6d+6s3r17y8PDQ6mpqUpOTta7776rnTt3lqnn/fv3q3///nJzc9M999yj+vXr6/jx49q1a5cSEhI0evRo3XrrrZo9e7bVfpMnT1ZwcLDuvfdeY1vVqlWNf7/55pv6z3/+owYNGuhf//qXfH19lZKSotWrVys5OVmLFy9W69atbfoxm81KSkrS8OHDrbavX7/+kq+jd+/eioyMtNnevHlzq8c33nijnnjiCUnSP//8o6SkJM2cOVP//POPxo4de8ljAAAAAKj4CB6uE5GRkcZshAEDBqh69ep6/fXXtWHDBiNUaNu2rXr06GHs4+fnp2nTpumjjz6y+dBZuXJlmyDhYjp27Kgvv/xSp06dko+Pj7E9KSlJN9xwgxo1aqT09PQrfYnFatiwofLz85WUlGQVPOTk5Ojzzz9Xp06d9Nlnn5V63Kefflq//fab5s2bp+7du1s9N2bMGM2dO7fMPS9btkyZmZn66KOPVK9ePavnTp48KUlq0KCBGjRoYPXctGnT1KBBg2K/Lv/97381Y8YMtWnTRkuWLDFuRSlJgwYN0qBBgzR69GitXbtW3t7eVvt27NhRa9eutTkHkpKSLvn+NW/evETniKenp1XdoEGD1LNnT7355psaPXo0t8kEAAAAnByXWlyn2rdvL0lWlyZcqG3btpKkAwcO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2rVr5enpKUlKS0vT0KFD1bhxY8XFxenYsWOaNWuWsrOzNXXqVGOstWvXasqUKXrkkUfUvn17JScna+TIkXr77bfVqlUro27MmDHau3evpk2bJjc3N73yyisaPny43n//fVWuXKHeagAAAAAArooK9Wm4S5cu6tq1qyRp4sSJ2rlzp03N4sWLdfbsWX3yySfy8PCQJIWGhlrVHD16VO+9956effZZ9e/fX5IUFBSkzp07a+XKlRo+fLgkaeXKlTp79qzmz5+v6tWrS5IKCgr073//W7Gxsapdu7Ykad68eerVq5fGjBkjSWrfvr327NmjBQsWKCEhQZK0Y8cObd68WYmJiYqIiJAk+fn5KSoqSuvXr1dUVFQ5vlMorbi4OM2fP994bDabVb9+fd19992KiYmRi8uVT/5p27athg4dqlGjRl3xWBfatm2bduzYoUceeaTcxwYAAAAAe6pQl1qU5MPfe++9p3vuuccIHYqzefNmFRYWqkePHsa26tWrKzw8XJs2bTK2bdq0SWFhYUboIEk9e/ZUYWGhtmzZIkk6cOCA9u3bp549e1odIyoqSlu3bjUuy9i0aZO8vLwUHh5u1Pj7+6tZs2ZWx7xWFBbazkap6MeuUqWKVq1apVWrVikhIUE9evTQnDlztGTJknLusPx99913io+Pd3QbAAAAAFBqFWrGw+UcPHhQJ06cUI0aNfTII49o8+bN8vDw0B133KGnn35aVatWlSSlpKSoZs2a8vb2ttq/SZMmeu+994zHKSkpuueee6xqvLy85Ovra6wHUfS3n5+fzVh5eXk6cOCAmjRpopSUFPn5+clkMlnV+fv7F7u2hLNzcTFpwYotOnQ87aoet14tb40YFH75wmK4uLhYXRpTNHNl/fr1evjhh8upQwAAAADA+ZwqePj7778lSS+88ILuuOMOJSQkaN++fZozZ44yMzP18ssvSzq3+GTROg7n8/LyUlra/z4op6eny8vLy6bO29vbqCv6+8K6osdFz1/smN7e3sVeMlIaFotFmZmZNttzcnJUWFiogoICFRQUXNExSqtSpUo6dDxN+w79c1WPW6S0r7dozZAL9/Pw8FBeXp4KCgr03XffadiwYXr33XfVokULo2bkyJE6c+aM3njjDWPbhg0b9PLLL+vQoUMKDAzU5MmTjeMUHcNisei1117TihUrlJmZqdtuu033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Mmry8vL0wgsvqFOnTmrRooUiIiL0yCOP6MyZM9q2bZuGDBkiSerfv78CAwMVGBgoSdq2bZsCAwP19ddfa/To0WrdurUef/xxSVJ6erqmTZumiIgItWjRQnfffbc2b95s9Zq+/vprPfjggwoLC1Pr1q01YMAAbdq0yarmgw8+UGBgoH755RdFR0erZcuW6t69u7755hsVFhZq7ty56tChgzp06KA5c+YUe9kKAAAAAJyPGQ+4rnTu3FnPPPOMtmzZok6dOmnv3r3avXu3FixYoOTkZKPu+PHj8vPzU58+fVS1alX99ttviouLU2ZmpkaOHHnJY3z55Zfav3+/pk6dqn/++UczZ87U888/r7lz50qS4uPjtXLlSo0fP1433XST/vnnH23ZskW5ubm65ZZbNHXqVD333HOaOXOm/P39bcafMmWK+vbtqwULFsjFxUW5ubl68MEHdfLkSY0ZM0a1a9fWJ598otjYWCNIkM4FJZ07d1Z0dLRcXFy0adMmPfzww3rjjTesZoBI0oQJE3TffffpwQcf1OLFizVy5Ej169dPGRkZeuGFF/TTTz8pLi5OAQEB6tOnz5V+WQAAAABcwwgecF1xd3dXly5dtHbtWnXq1ElJSUkKCQlRgwYNrOrCwsIUFhYmSbJYLGrTpo2ys7P11ltvXTZ4sFgseu2112Q2myWdW7MhPj5ehYWFcnFx0S+//KKIiAg98MADxj7du3c3/t20aVNJ0k033aSgoCCb8bt06aInn3zSePz+++/r999/18cff2zse9ttt2n//v1auHChXn31VUnSv/71L2OfwsJChYaGau/evXr33Xdtgod//etfuv/++yVJtWvXVp8+fbRz506tWrXKGP/LL7/UunXrCB4AAAAAXBLBA647vXv31rhx45Sdna3k5GQNHjzYpiYnJ0fx8fFas2aNjhw5YnVpxtmzZ1W1atWLjn/rrbcaoYMkNWnSRHl5eTp58qR8fX3VvHlzJSYmKi4uTh07dlSLFi1Ktb5Ep06drB5v2bJFAQEBaty4sfLz843tHTp00CeffGI8Pnr0qObOnatvvvlGJ06ckMVikSTdcsstNscIDw83/t24cWNJsllE08/PT6mpqSXuGwAAAMD1ieAB152IiAi5urrq1Vdf1cGDB9WzZ0+bmhdffFGrV6/WiBEj1KJFC3l6emrDhg167bXXlJOT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1c6dO9W2bVtJ0rx589SrVy+NGTNGktS+fXvt2bNHCxYsUEJCgiRpx44d2rx5sxITExURESFJ8vPzU1RUlNavX6+oqChJUmJiomrUqKGXX35ZZrNZYWFhOnXqlBYtWqTBgwfLbDYrJydH8fHxio6O1rBhwyRJbdq0UY8ePZSYmKhp06aV+3sBAChfFWmBMIlFwgAAwLWhVMHDokWLtGjRosvWWSwWmUwm/fbbb2Vu7GLy8/NVtWpVI3SQJE9PT+O4knTgwAHt27dPTz75pNW+UVFRmj17tnJzc2U2m7Vp0yZ5eXkpPDzcqPH391ezZs20adMmI3jYtGmTunXrJrPZbDVWfHy8duzYodDQUG3fvl0ZGRnq2bOnUWM2m9WtWzd9/vnn5f4+AADshwXCAAAAyk+pgofBgwerTZs29uqlRO6++259/PHHevvtt9W3b1+dPn1aL7/8spo3b67WrVtLOjczQzo3e+F8TZo0UV5eng4cOKAmTZooJSVFfn5+ViGGdC58KBojMzNTR44ckb+/v02NyWRSSkqKQkNDjfoL65o0aaI33nhD2dnZqlKlSvm9EQAAAAAAOIFSBQ9BQUHq3r27vXopkbZt22r+/PkaN26cnnvuOUlSs2bNtGTJElWqVEmSlJaWJkny8vKy2rfocdHz6enpxmyJ83l7e2vnzp2Szi0+WdxYZrNZ7u7uVmOZzWa5ubnZHNNisSgtLa3MwYPFYlFmZmaZ9nU0k8kkd3d3R7dhIysry2ZxUOB6UlG/N1E8e//M4nxwPpwTuBDnBM53vf1ft6Ken878dSi6iqG8lCp4qAi2b9+up556Svfee686deqk06dPa+HChXr44Yf1zjvvXJOzCvLy8uxy2crV4O7urubNmzu6DRupqanKyspydBuAw1TU700Uz94/szgfnA/nBC7EOYHzXW//162o56ezfx3OX2rgSjld8DB9+nS1b99eEydONLa1atVKnTp10scff6yBAwfK29tb0rnZCr6+vkZdenq6JBnPe3l56ejRozbHSEtLM2qKZkQUzXwokpubq6ysLKuxcnNzlZOTYzXrIT09XSaTyagrC1dXVzVt2rTM+ztSeaZk5cnPz89p00egPFTU700Uz94/szgfnA/nBC7EOYHzXW//162o56czfx327t1bruOVOHi49dZbdcMNN5Trwcvizz//1O2332617cYbb1SNGjX0119/SfrfOgspKSlWay6kpKTI1dVVDRo0MOq2bt1qM40kNTVVAQEBkiQPDw/VqVPHWMPh/BqLxWKMX/R3amqqbr75Zqtj1q1b94pmYphMJnl4eJR5f9iqiFOxAOBi+JmFC3FO4EKcEzgf50PF4Mxfh/IOc1xKWvjmm28qLCzMeHzgwAF9/fXXSkpK0ldffaUDBw6Ua2MXU7duXe3atctq26FDh/TPP/+oXr16kqQGDRqocePGWrdunVVdcnKywsLCjCkjkZGRSktL09atW42a1NRU7dq1S5GRkca2yMhIbdiwQXl5eVZjeXl5KSQkRJLUunVrVatWTZ9++qlRk5eXp/Xr11uNBQAAAADA9aTUl1p8+umnmj9/vs0MAOncHRxGjBhhdUvJ8nbfffdpxowZmj59urp06aLTp0/rtddeU82aNa2OO2rUKI0fP14NGzZUaGiokpOT9fPPP+utt94yakJCQhQREaFJkyZpwoQJcnNz09y5cxUYGKg77rjDqIuJidGaNWs0btw4DRo0SHv27FFiYqLGjh1rhBhubm6KjY1VXFycfHx8FBAQoBUrVuj06dOKiYmx2/sBAAAAAEBFVqrg4cUXX9TSpUvl6empu+66S4GBgapatarOnj2r3bt368svv9QTTzyhnTt36sknn7RLw0OGDJHZbNaKFSv0/vvvq2rVqmrVqpVeeeUV1ahRw6jr3bu3srKylJCQoMWLF8vPz0/z5883ZigUeeWVVzRz5kxNnTpV+fn5ioiI0OTJk1W58v/emkaNGikxMVGzZs3Sww8/LB8fH40ePVrR0dFWYw0fPlwWi0VLly7VqVOn1KxZMyUmJhqXdgAAAAAAcL0pcfDw9ddfKzExUVFRUXruuedUrVo1m5qMjAw9++yzWrp0qdq1a6eOHTuWa7PSuWtNBg0apEGDBl22dsCAARowYMAlazw9PTVjxgzNmDHjknWtW7fWu+++e9neYmNjFRsbe9neAAAAAAC4HpRqjYfmzZtrzpw5xYYOklStWjW99NJLatasmZYvX15uTQIAAAAAAOdU4uBh586d6tOnz2VXtzSZTOrTp4927tx5xc0BAAAAAADnVuLgISsrS56eniWq9fT0VHZ2dpmbAgAAAAAA14YSBw9169bVr7/+WqLanTt36sYbbyxzUwAAAAAA4NpQ4uChc+fOev/99/XLL79csm7nzp364IMP1KVLlytuDgAAAAAAOLcSBw+xsbGqXr26hgwZokWLFunIkSNWzx89elSLFi3SkCFDVL16dT388MPl3iwAAAAAAHAuJb6dZvXq1bVs2TI9/vjjeuWVV/Tqq6/K09NTVatW1dmzZ3XmzBlZLBY1bdpUr776qmrUqGHPvgEAAAAAgBMocfAgSf7+/vrwww/12Wef6csvv1RKSorOnj2revXqyd/fX507d1b37t3l6upqr34BAAAAAIATKXHw8P3336tJkyby8fFRr1691KtXL3v2BQAAAAAArgElXuNhyJAh2rJliz17AQAAAAAA15gSBw8Wi8WefQAAAAAAgGtQiYMHAAAAAACA0ipV8GAymezVBwAAAAAAuAaV6q4WTz75pJ588skS1ZpMJu3atatMTQEAAAAAgGtDqYKHDh06qHHjxnZqBQAAAAAAXGtKFTzcdddd6tOnj716AQAAAAAA1xgWlwQAAAAAAHZD8AAAAAAAAOyG4AEAAAAAANhNidd4+P333+3ZBwAAAAAAuAYx4wEAAAAAANgNwQMAAAAAALAbggcAAAAAAGA3BA8AAAAAAMBuCB4AAAAAAIDdEDwAAAAAAAC7IXgAAAAAAAB2Q/AAAAAAAADshuABAAAAAADYDcEDAAAAAACwG4IHAAAAAABgNwQPAAAAAADAbggeAAAAAACA3RA8AAAAAAAAuyF4AAAAAAAAdkPwAAAAAAAA7IbgAQAAAAAA2A3BAwAAAAAAsBuCBwAAAAAAYDcEDwAAAAAAwG6cNnj48MMPdddddykoKEihoaF66KGHlJ2dbTz/5Zdfqm/fvgoKClL37t31/vvv24yRm5urF154QeHh4WrVqpUefPBBpaSk2NT9+eefevDBB9WqVSuFh4dr9uzZys3NtalbvXq1unfvrqCgIPXt21dfffVV+b5oAAAAAACcjFMGD6+99pqef/55RUVFKTExUc8995zq16+vgoICSdIPP/ygkSNHqlWrVkpISFDPnj31zDPPaN26dVbjTJ8+XatXr9bYsWMVFxen3NxcDRs2TGfOnDFq0tLSNHToUOXl5SkuLk5jx47Vu+++q1mzZlmNtXbtWk2ZMkU9e/ZUQkKCWrVqpZEjR+rHH3+0+/sBAAAAAEBFVdnRDZRWSkqK5s+fr4ULF6pjx47G9u7duxv/fu211xQcHKznnntOktS+fXsdOHBA8+bNU48ePSRJR48e1Xvvvadnn31W/fv3lyQFBQWpc+fOWrlypYYPHy5JWrlypc6ePav58+erevXqkqSCggL9+9//VmxsrGrXri1Jmjdvnnr16qUxY8YYx9yzZ48WLFighIQEu74nAAAAAHC1FRZa5OJicnQbcAJOFzx88MEHql+/vlXocL7c3Fxt27ZN48ePt9oeFRWlpKQkHTx4UPXr19fmzZtVWFhoBBGSVL16dYWHh2vTpk1G8LBp0yaFhYUZoYMk9ezZU88++6y2bNmiu+++WwcOHNC+ffv05JNP2hyz6LIMs9lcTu8AAAAAADiei4tJC1Zs0aHjaQ7to2VgXQ3s0cqhPeDSnC54+OmnnxQQEKCFCxfqzTff1JkzZ9SiRQs9/fTTatmypf766y/l5eXJ39/far8mTZpIOjdjon79+kpJSVHNmjXl7e1tU/fee+8Zj1NSUnTPPfdY1Xh5ecnX19dYD6Lobz8/P5ux8vLydODAAeP4ZWGxWJSZmVnm/R3JZDLJ3d3d0W3YyMrKksVicXQbgMNU1O9NFM/eP7M4H5wP5wQuxDmB812N/+sWnROHjqdp36F/7Hqsy6nr6+XQ41+MM3/msFgsMpnKbzaL0wUPJ06c0M6dO7Vnzx49++yzcnd316JFixQdHa3169crLe1c2ublZX3yFT0uej49PV2enp4243t5eRk1RXUXjiVJ3t7eRl1Jj1lWeXl5+u23365oDEdxd3dX8+bNHd2GjdTUVGVlZTm6DcBhKur3Jopn759ZnA/Oh3MCF+KcwPmuxv91OScuz9k/c5TnrH2nCx6Kfvv/6quv6uabb5YktWzZUl26dNFbb72liIgIB3dY/lxdXdW0aVNHt1Em5ZmSlSc/Pz+nTR+B8lBRvzdRPHv/zOJ8cD6cE7gQ5wTOdzX+r8s5cXnO/Jlj79695Tqe0wUPXl5eql69uhE6SOfWZmjevLn27t2rXr16SZLVnSmkczMXJBmXVnh5eSkjI8Nm/PT0dKvLL7y8vGzGks7NYiiqK/r7zJkz8vX1vegxy8pkMsnDw+OKxoA1pgoCcCb8zMKFOCdwIc4JnI/zoWJw5q9DeQdLTnc7zUv95j8nJ0cNGzaUq6urse5CkaLHRWs/+Pv76++//7a5DCIlJcVqfQh/f3+bsc6cOaMTJ05YjXX+Mc4fy9XVVQ0aNCjNSwQAAAAA4JrhdMFD586ddfr0aas1D/755x/9+uuvuuWWW2Q2mxUaGqrPPvvMar/k5GQ1adJE9evXlyRFRETIxcVF69evN2rS0tK0efNmRUZGGtsiIyP1zTffGLMXJGndunVycXFReHi4JKlBgwZq3Lix1q1bZ3PMsLAw7mhRgVSu6qXCwkJHt2GoSL0AAAAAgD043aUWXbt2VVBQkEaPHq2xY8fKzc1Nixcvltls1v333y9JevTRRzVkyBBNmzZNPXv21LZt25SUlKS5c+ca49x4443q37+/Zs+eLRcXF9WuXVvx8fHy9PTUfffdZ9Tdd999evPNNzVixAjFxsbq2LFjmj17tu677z7Vrl3bqBs1apTGjx+vhg0bKjQ0VMnJyfr555/11ltvXb03B5dV2c1DLi4uit+4XIfTjjm0l7retRXbcYhDewAAAAAAe3O64MHFxUWLFy/WzJkzNXXqVOXl5alt27Z6++23jfUV2rZtq7i4OL3yyit67733VLduXU2fPl09e/a0Gmvy5MmqWrWq5syZo7Nnz6p169Z6/fXXre524e3trTfeeEPPP/+8RowYoapVq6p///4aO3as1Vi9e/dWVlaWEhIStHjxYvn5+Wn+/PkKCQmx/5uCUjucdkz7Tx50dBsAAAAAcM1zuuBBknx8fPTiiy9esub222/X7bfffskas9msCRMmaMKECZesa9KkiZYtW3bZvgYMGKABAwZctg4AAAAAgOuF063xAAAAAAAAnAfBAwAAAAAAsBuCBwAAAAAAYDcEDwAAAAAAwG4IHgAAAAAAgN0QPAAAAAAAALsheAAAAAAAAHZD8AAAAAAAAOyG4AEAAAAAANgNwQMAAAAAALAbggcAAAAAAGA3BA8AAAAAAMBuCB4AAAAAAIDdEDwAAAAAAAC7IXgAAAAAAAB2Q/AAAAAAAADshuABAAAAAADYDcEDAAAAAACwG4IHAAAAAABgNwQPAAAAAADAbggeAAAAAACA3RA8AAAAAAAAuyF4AAAAAAAAdkPwAAAAAAAA7IbgAQAAAAAA2A3BAwAAAAAAsBuCBwAAAAAAYDcEDwAAAAAAwG4IHgAAAAAAgN0QPAAAAAAAALsheAAAAAAAAHZD8AAAAAAAAOyG4AEAAAAAANgNwQMAAAAAALAbggcAAAAAAGA3BA8AAAAAAMBuCB4AAAAAAIDdEDwAAAAAAAC7IXgAAAAAAAB24/TBw9mzZxUZGanAwED98ssvVs+tXr1a3bt3V1BQkPr27auvvvrKZv8zZ85o0qRJateunUJCQjR69GgdP37cpm779u0aOHCggoOD1blzZy1evFgWi8WqxmKxaPHixerUqZOCg4M1cOBA/fjjj+X6egEAAAAAcCZOHzwsXLhQBQUFNtvXrl2rKVOmqGfPnkpISFCrVq00cuRImyBgzJgx2rJli6ZNm6aXXnpJqampGj58uPLz842a/fv3KyYmRr6+voqPj9fQoUM1b948LV261GqshIQEzZs3T8OGDVN8fLx8fX0VHR2tAwcO2OW1AwAAAAAqlspVvVRYWOjoNgwVoZfKjm7gSvz555965513NGHCBD377LNWz82bN0+9evXSmDFjJEnt27fXnj17tGDBAiUkJEiSduzYoc2bNysxMVERERGSJD8/P0VFRWn9+vWKioqSJCUmJqpGjRp6+eWXZTabFRYWplOnTmnRokUaPHiwzGazcnJyFB8fr+joaA0bNkyS1KZNG/Xo0UOJiYmaNm3aVXlPAAAAAACOU9nNQy4uLorfuFyH0445tJe63rUV23GIQ3uQnDx4mD59uu677z75+flZbT9w4ID27dunJ5980mp7VFSUZs+erdzcXJnNZm3atEleXl4KDw83avz9/dWsWTNt2rTJCB42bdqkbt26yWw2W40VHx+vHTt2KDQ0VNu3b1dGRoZ69uxp1JjNZnXr1k2ff/65PV4+AAAAAKCCOpx2TPtPHnR0GxWC015qsW7dOu3Zs0cjRoyweS4lJUWSbAKJJk2aKC8vz7j0ISUlRX5+fjKZTFZ1/v7+xhiZmZk6cuSI/P39bWpMJpNRV/T3hXVNmjTR4cOHlZ2dXdaXCgAAAACA03LKGQ9ZWVmaNWuWxo4dq2rVqtk8n5aWJkny8vKy2l70uOj59PR0eXp62uzv7e2tnTt3Sjq3+GRxY5nNZrm7u1uNZTab5ebmZnNMi8WitLQ0ValSpdSvVTq3aGVmZmaZ9nU0k8kkd3d3R7dRoWVlZdksVArYG9+bzsXePyc4H5wP5wQuxDmB812N/19yTjiX0p4TFovF5hf0V8Ipg4fXXntNNWvW1D333OPoVq6KvLw8/fbbb45uo0zc3d3VvHlzR7dRoaWmpiorK8vRbeA6w/emc7H3zwnOB+fDOYELcU7gfFfj/5ecE86lLOfE+UsNXCmnCx4OHTqkpUuXasGCBcZshKLZAJmZmTp79qy8vb0lnZut4Ovra+ybnp4uScbzXl5eOnr0qM0x0tLSjJqiGRFFxyqSm5urrKwsq7Fyc3OVk5NjNeshPT1dJpPJqCsLV1dXNW3atMz7O1J5pmTXKj8/P2Y84Krje9O52PvnBOeD8+GcwIU4J3C+q/H/S84J51Lac2Lv3r3lenynCx4OHjyovLw8PfzwwzbPDRkyRC1bttScOXMknVt34fw1F1JSUuTq6qoGDRpIOrcew9atW22mkaSmpiogIECS5OHhoTp16hhrOJxfY7FYjPGL/k5NTdXNN99sdcy6deuW+TIL6dw3tYeHR5n3R8XGFDUAl8PPCVyIcwIX4pzA+TgfcKHSnhPlHSw53eKSzZo10/Lly63+PP3005Kkf//733r22WfVoEEDNW7cWOvWrbPaNzk5WWFhYcaUkcjISKWlpWnr1q1GTWpqqnbt2qXIyEhjW2RkpDZs2KC8vDyrsby8vBQSEiJJat26tapVq6ZPP/3UqMnLy9P69eutxgIAAAAA4HridDMevLy8FBoaWuxzt9xyi2655RZJ0qhRozR+/Hg1bNhQoaGhSk5O1s8//6y33nrLqA8JCVFERIQmTZqkCRMmyM3NTXPnzlVgYKDuuOMOoy4mJkZr1qzRuHHjNGjQIO3Zs0eJiYkaO3asEWK4ubkpNjZWcXFx8vHxUUBAgFasWKHTp08rJibGju8IAAAAAAAVl9MFDyXVu3dvZWVlKSEhQYsXL5afn5/mz59vzFAo8sorr2jmzJmaOnWq8vPzFRERocmTJ6ty5f+9NY0aNVJiYqJmzZqlhx9+WD4+Pho9erSio6Otxho+fLgsFouWLl2qU6dOqVmzZkpMTDQu7QAAAAAA4HpzTQQPoaGh2r17t832AQMGaMCAAZfc19PTUzNmzNCMGTMuWde6dWu9++67l6wxmUyKjY1VbGzs5ZsGAAAAAOA64HRrPAAAAAAAAOdB8AAAAAAAAOyG4AEAAAAAANgNwQMAAAAAALAbgodrVGGhxdEtAAAAAABwbdzVArZcXExasGKLDh1Pc2gfLQPramCPVg7tAQAAAADgOAQP17BDx9O079A/Du2hrq+XQ48PAAAAAHAsLrUAAAAAAAB2Q/AAAAAAAADshuABAAAAAADYDcEDAAAAAACwG4IHAAAAAABgNwQPAAAAAADAbggeAAAAAACA3RA8AAAAAAAAuyF4AAAAAAAAdkPwAAAAAAAA7IbgAQAAAAAA2A3BAwAAAAAAsBuCBwAAAAAAYDcEDwAAAAAAwG4IHgAAAAAAgN0QPAAAAAAAALsheAAAAAAAAHZD8AAAAAAAAOyG4AEAAAAAANgNwQMAAAAAALAbggcAAAAAAGA3BA8AAAAAAMBuCB4AAAAAAIDdEDwAAAAAAAC7IXgAAAAAAAB2Q/AAAAAAAADshuABAAAAAADYDcEDAAAAAACwG4IHAAAAAABgNwQPAAAAAADAbggeAAAAAACA3RA8AAAAAAAAu3G64OHTTz/Vo48+qsjISLVq1Up33nmn3nvvPVksFqu61atXq3v37goKClLfvn311Vdf2Yx15swZTZo0Se3atVNISIhGjx6t48eP29Rt375dAwcOVHBwsDp37qzFixfbHM9isWjx4sXq1KmTgoODNXDgQP3444/l+toBAAAAAHA2Thc8LFu2TO7u7po4caJee+01RUZGasqUKVqwYIFRs3btWk2ZMkU9e/ZUQkKCWrVqpZEjR9oEAWPGjNGWLVs0bdo0vfTSS0pNTdXw4cOVn59v1Ozfv18xMTHy9fVVfHy8hg4dqnnz5mnp0qVWYyUkJGjevHkaNmyY4uPj5evrq+joaB04cMCu7wdQUoWFlssXXSUVqRcAAAAA9lXZ0Q2U1muvvSYfHx/jcVhYmE6fPq3XX39djz32mFxcXDRv3jz16tVLY8aMkSS1b99ee/bs0YIFC5SQkCBJ2rFjhzZv3qzExERFRERIkvz8/BQVFaX169crKipKkpSYmKgaNWro5ZdfltlsVlhYmE6dOqVFixZp8ODBMpvNysnJUXx8vKKjozVs2DBJUps2bdSjRw8lJiZq2rRpV+39AS7GxcWkBSu26NDxNIf2Ua+Wt0YMCndoDwAAAACuHqcLHs4PHYo0a9ZM7777rjIzM/XPP/9o3759evLJJ61qoqKiNHv2bOXm5spsNmvTpk3y8vJSePj/PgD5+/urWbNm2rRpkxE8bNq0Sd26dZPZbLYaKz4+Xjt27FBoaKi2b9+ujIwM9ezZ06gxm83q1q2bPv/88/J+C4AyO3Q8TfsO/ePoNgAAAABcR5zuUovi/Pe//1Xt2rVVrVo1paSkSDo3e+F8TZo0UV5ennHpQ0pKivz8/GQymazq/P39jTEyMzN15MgR+fv729SYTCajrujvC+uaNGmiw4cPKzs7u5xeKQAAAAAAzsXpZjxc6IcfflBycrImTJggSUpLOzeN3MvLy6qu6HHR8+np6fL09LQZz9vbWzt37pR0bvHJ4sYym81yd3e3GstsNsvNzc3mmBaLRWlpaapSpUqZX6PFYlFmZmaJ600mk9zd3ct8PFxdWVlZNouVlreKeE5cjdeNi6uI5wQuzt7fL5wPzodzAhfinMD5rtf/X+LiSntOWCwWm1/SXwmnDh6OHj2qsWPHKjQ0VEOGDHF0O3aTl5en3377rcT17u7uat68uR07QnlKTU1VVlaWXY9REc+Jq/G6cXEV8ZzAxdn7+4XzwflwTuBCnBM43/X6/0tcXFnOifOXG7hSThs8pKena/jw4apevbri4uLk4nLuqhFvb29J52Yr+Pr6WtWf/7yXl5eOHj1qM25aWppRUzQjomjmQ5Hc3FxlZWVZjZWbm6ucnByrWQ/p6ekymUxGXVm5urqqadOmJa4vz2QK9ufn53dVEumK5mq8blxcRTwncHH2/n7hfHA+nBO4EOcEzne9/v8SF1fac2Lv3r3lenynDB6ys7MVGxurM2fOaNWqVVaXTBSts5CSkmK15kJKSopcXV3VoEEDo27r1q02U0hSU1MVEBAgSfLw8FCdOnWMNRzOr7FYLMb4RX+npqbq5ptvtjpm3bp1r+gyC+ncN7WHh8cVjYGK63qdona9vm6gLPh+wYU4J3Ahzgmcj/MBFyrtOVHewZLTLS6Zn5+vMWPGKCUlRUuWLFHt2rWtnm/QoIEaN26sdevWWW1PTk5WWFiYMV0kMjJSaWlp2rp1q1GTmpqqXbt2KTIy0tgWGRmpDRs2KC8vz2osLy8vhYSESJJat26tatWq6dNPPzVq8vLytH79equxAAAAAAC43jjdjId///vf+uqrrzRx4kRlZGToxx9/NJ5r3ry5zGazRo0apfHjx6thw4YKDQ1VcnKyfv75Z7311ltGbUhIiCIiIjRp0iRNmDBBbm5umjt3rgIDA3XHHXcYdTExMVqzZo3GjRunQYMGac+ePUpMTNTYsWONEMPNzU2xsbGKi4uTj4+PAgICtGLFCp0+fVoxMTFX7b0BAAAAAKCicbrgYcuWLZKkWbNm2Ty3YcMG1a9fX71791ZWVpYSEhK0ePFi+fn5af78+cYMhSKvvPKKZs6cqalTpyo/P18RERGaPHmyKlf+39vSqFEjJSYmatasWXr44Yfl4+Oj0aNHKzo62mqs4cOHy2KxaOnSpTp16pSaNWumxMRE49IOAAAAAACuR04XPHz55ZclqhswYIAGDBhwyRpPT0/NmDFDM2bMuGRd69at9e67716yxmQyKTY2VrGxsSXqDwAAAACA64HTrfEAAAAAAACcB8EDgKvK27OKLIWFjm7DSkXrBwAAALiWON2lFgCcW9UqZplcXJSalKCsk0cc3Y7ca9aRX+/hjm4DAAAAuGYRPABwiKyTR5R17C9HtwEAAADAzrjUAgAAAAAA2A3BAwAAAAAAsBuCBwAAAAAAYDcEDwAAAAAAwG4IHgAAAAAAgN0QPAAAAAAAALsheAAAAAAAAHZD8AAAAAAAAOyG4AEAAAAAANgNwQMAAAAAALAbggcAAAAAAGA3BA8ArmuVq3qpsLDQ0W0YKlIvAAAAQHmo7OgGAMCRKrt5yMXFRfEbl+tw2jGH9lLXu7ZiOw5xaA8AAABAeSN4AABJh9OOaf/Jg45uAwAAALjmcKkFAAAAAACwG4IHAAAAAABgNwQPAAAAAADAbggeAAAAAACA3RA8AAAAAAAAuyF4AAAAAAAAdkPwAAAAAAAA7IbgAQAAAAAA2A3BAwAAAAAAsBuCBwAAAAAAYDcEDwAAAAAAwG4IHgAAAAAAgN0QPAAAAAAAALsheAAAAAAAAHZD8AAAAAAAAOyG4AEAAAAAANgNwQMAAAAAALAbggcAAAAAAGA3BA8AAOD/s3fXcVVk7wPHP6SKqFiYqFgXE1sx1+4uLERdu7CwQcFARbG7AxVWsdu1xVVX7MbAAgNQLnW5cH5/+LuzsOB+V1e5ouf9en1f6tyZ+z1zd2aemWeec44kSZIkSdI3IxMPkiRJkiRJkiRJkiR9MzLxIEmSJEmSJEmSJEnSNyMTD19ZYGAgvXr1oly5ctSoUYPZs2ej0Wj03SxJkiRJkiRJkiRJ0gtjfTfgR/L+/Xt69uxJoUKFWLRoESEhIXh4eBATE4OLi4u+mydJkiRJkiRJkiRJqU4mHr6ibdu2ERkZyeLFi7GwsAAgPj6eqVOn0r9/f3LlyqXfBkqSJEmSJEmSJElSKpNdLb6i06dPY2dnpyQdAJo2bUpCQgLnzp3TX8MkSZIkSZIkSZIkSU9k4uErevToEYULF06yLHPmzOTMmZNHjx7pqVWSJEmSJEmSJEmSpD8GQgih70b8KEqVKsXw4cPp169fkuUtWrSgfPnyuLu7f/Z3XrlyBSEEJiYmn7WdgYEBH9QxxCckfPb/59dkamJMxgymaKMiEAnxem0LgKGxCUbpMxIRo0ar5/YYGxqRKb05qXUKymMiZfKYkMdEYt/T8QCpe0x8L8cDyGPin8hjQh4TfyePCXlMJCbvJfR/PMCPcUzExcVhYGBAhQoVvk47vsq3SN+MgYFBkj8/R2bz9F+7OV/M2CyTvpuQRKb05vpuguJL/tt+KXlMfJo8JvTvezomvqfjAVLvmPiejgeQx8Q/kceE/slj4vsgj4mUyXuJ70NaPiYMDAy+6nEkEw9fUebMmYmIiEi2/P3792TJkuWLvrN8+fL/tVmSJEmSJEmSJEmSpDdyjIevqHDhwsnGcoiIiODNmzfJxn6QJEmSJEmSJEmSpJ+BTDx8RbVr1+b8+fN8+PBBWXbo0CEMDQ2pUaOGHlsmSZIkSZIkSZIkSfohB5f8it6/f0/z5s2xtramf//+hISE4OHhQcuWLXFxcdF38yRJkiRJkiRJkiQp1cnEw1cWGBiIu7s7AQEBZMyYkdatWzNixAhMTU313TRJkiRJkiRJkiRJSnUy8SBJkiRJkiRJkiRJ0jcjx3iQJEmSJEmSJEmSJOmbkYkHSZIkSZIkSZIkSZK+GZl4kCRJkiRJkiRJkiTpm5GJB0mSJEmSJEmSJEmSvhmZeJAkSZIkSZIkSZIk6ZuRiQdJkiRJkiRJkiRJkr4ZmXiQJEmSpFQgZ6+WJEmSJOlnJRMPkpTGxMbG6rsJkiT9S1qtlhcvXpCQkICBgYG+myP9RNRqtYwXkpRGJU5Uy6S1lNq0Wu03+V7jb/KtkiR9ExcvXsTf35+8efPSsWNHfTfnpxUbG8vx48cpXrw4RYsW1XdzpO9UVFQUM2bMIDQ0lKZNm9KyZUt9N0n6SZw5c4bdu3dTunRp2rdvT6ZMmfTdJEmS/qWYmBhWr15NXFwcI0aMkElrKVVdu3aNq1evUqZMGSpUqPBVv1tWPEhSGrFr1y6cnZ25fPky6dKl03dzflqRkZEMHDiQWbNmsXHjRuLi4vTdJOk7pFar6dy5Mw8ePEClUlG3bl19N0n6Sfj5+TFu3DjCwsLImDGjTDp8IxqNhsuXL/Phwwd9N0X6gajVahwdHTl16hR37twhMjJS302SfiJ79+5lzJgxHD16lKCgoK/+/QZC1u9I0nfvwIEDjB8/nsGDB9OgQQMKFy4MQHx8PEZGRnpu3c8jMjKSzp07ky1bNvr06UOlSpXImDGjvpslfWdiY2Pp1asX6dKlY9KkSRQqVAgjIyMSEhIwNPwr3y+EkG+ypK/q8OHDTJw4kQEDBtC6dWty5swJkOzYk/6byMhIxowZw61bt+jWrRu//vqr/H2l/ywqKorOnTuTNWtWhg8fTpkyZTA1NU1yryfjhvSt7Nmzh4kTJ9K/f3/q1atHyZIlga97zMmuFpL0nQsODmb16tX06dMHBwcH0qdPr3z296SDDEjfTnx8PJMmTSJr1qxMmzaNAgUK6LtJ0nfq9OnThIWFMWPGDAoXLqyck4aGhmi1WsLDw8maNatMGkpflVqtxsfHhzZt2mBvb4+5ubnyme7YS0hIwNTUFJDx4kup1Wrs7e3Jli0bw4cPp1GjRjLpIP1nQghWrFhBpkyZcHNzo2DBgsr5mThWyHNW+hYePHjAihUrGDZsGD169EjyrPE1jzmZeJCk71xERAQvX76kcuXKpE+fXsl8P336lCtXrnDz5k1MTU1xdHQkV65c+m7uD+v9+/c8fvyYTp06UaBAAbRaLcbGHy+hT58+5fbt22TNmpV8+fJhZWWl59ZK+nT//n0iIiIoX758kuUbNmzg/PnzPH78mDx58uDs7EypUqX01ErpRxMZGcnNmzepX78+5ubmSqy4f/8+Z8+e5eTJk1hYWFCtWjW6du2KgYGBTD58pri4OIYPH062bNmSPBymVFEif1vpcxgYGHDv3j0sLS0pVKiQslwIwbFjx7h58yZv3ryhbt26VK5cGQsLC721VfrxvH37lsjISKpWrZok6fDy5UsePHjAjRs3KFy4MLVr106S1P5cMvEgSd85jUZDeHg4ERERwF9ByMPDg+fPn2NkZER8fDxHjx5l/vz5lC5dWt7wfAMRERG8evVKGdPB2NiY6Ohopk2bxunTp3nz5g0AxYsXZ+rUqckeOqUfW+JzztramrCwME6dOkXNmjW5e/cu06dP58qVK2TPnp0CBQpw8+ZNBg0axNq1aylSpIg8Z6X/TAhBjhw5ePDgATExMRgaGnLgwAFmzpxJaGgouXPn5vbt2xw5coSwsDAGDx4sj7nPFBQUxOvXr3FycqJQoUJKcsfQ0JCIiAgePXpEtmzZyJ07NyYmJrKLi/SvqdVqgoODsba2Bj52j3r//j2TJk3i7NmzxMfHY2BgwP79++nevTsDBgyQ47dIX01QUBDBwcEUKVJEWXbmzBm8vLy4ffu2sqxZs2Y4OTl9cdWvHONBkr5Dp06dIm/evBQrVozw8HDGjRvH1atXqVevHqGhoZw8eZIiRYrQsWNHWrVqxblz55g3bx558uRhy5Yt8mbyK4mOjiYsLIy8efMSHh5Or169MDU1pXXr1piamrJmzRqePHlC1apV6d69Ozdu3GDLli0UL16cxYsXky1bNn3vgpQKIiIimDRpEqNHj8bKyorAwEBmzpzJn3/+Se7cuXn27BnZsmWjdevW9O3bl8yZM3PmzBlGjhxJ7dq1mTt3rr53QUqjtm3bRrp06Wjbti0ALi4unDx5kjx58mBkZMSVK1coVaoUHTt2xN7enuvXrzN79myePHnChg0bktxkSv/bxYsXcXR0ZOXKldSsWRP4WAXh6enJmTNnePToEVmyZKFWrVq4u7uTIUMGmVSUPikyMpJdu3bRoUMH0qVLh6+vL5MnT6ZFixakT5+e8+fPExoaSv369enbty8mJibMnj2by5cvs2XLFmxsbPS9C1Iadv36dbJmzYqVlRWvXr2iW7duZMmShY4dO3Ljxg127dpFnjx5aNeuHZUrV+bSpUssX76cPn36MGLEiC/6/5QVD5L0ndEFnkWLFlGsWDEsLCz49ddf2b59O6dOncLAwIAhQ4bwyy+/ULp0aQBatmyJv78/x48f5/Xr17LLxVegVqtp2bIldevWZfz48VhYWODh4cGAAQOYOXMmcXFxlC1bFjc3N5o1a0bGjBlp0KAB8fHxrF+/nrCwMJl4+Amo1Wratm1LlixZlPLDIkWKMGLECE6cOEFAQAC1atWic+fO5M+fX5mRpmrVqmTLlu2bzZUt/fh+++03pkyZwrhx45Q3725ubsyePZvr16/z7t07Jk6cSI0aNZQBicuWLUvjxo2ZOXMm8fHxet6DtEGj0SjjYmTKlAkLCwuOHj2KgYEB8fHxzJ07l3v37lG6dGmcnZ05d+4cBw8exNzcnMmTJ8uxXKQUqdVqmjVrRpUqVWjTpg3p0qWjTZs2REZGsnjxYgAqVKiAvb09VapUUeLL+PHjadKkCQEBATLxIH2xrVu34ubmxubNm7GysiJHjhyMGjWKlStXMn36dIyMjOjRoweNGjWiUqVKANja2nLp0iX27dtH3759MTMz++yKLpl4kKTviK+vL66urkyaNIl69eopb0oqVaqEjY0NMTExxMfHJ0ks6NYxNDSkdOnSst/fV6BWq2ndujUFCxZkwIABmJiYEB8fj0qlYuvWrTx+/Jjo6Gjq1KmDoaEhBgYGxMXFYWJiQpYsWciZM+d/6gMnpQ2646RAgQLMmjWLrFmzKg+ApUqVolSpUim+7RRC8Pz5c8zNzSlTpoyyTL4Vlf4tXYJ68uTJ2NvbY2RkpIw74+zsTHx8PDExMUlm3RFCEBcXx9u3bylZsiRZsmTR4x6kDWq1mjZt2tCjRw969uxJiRIl6NevH56enuzatYvY2FiKFi3K2LFj6dixI+bm5vTu3Ztu3bpx8eJFIiIiZEyWktEdV9bW1owZM0Y5T01MTHB0dKRp06bExcWRP3/+ZNs+fPiQnDlzolKpUrvZ0g/C19eXadOmMXbsWMqVK4cQAhMTE5o2bYqdnR2PHj0ie/bsSrcfHUNDQ4yMjChXrtwX3+PKxIMkfSd8fX1xcXFh3LhxdO3aFUNDQxL3hDI3N1dO9ISEBAwMDJT/BQQE8McffyhZc+nLqdVqWrVqhZWVFbNnz8bS0pKEhARlOsTcuXOTO3duZX3dg6aJiQmhoaFcu3YNlUol+17+4HTHSaFChZgxY0aS4yTxwKM6usQUQFhYGOvXryc8PJzGjRsDcqRy6d/bsWMHkydPZuLEiXTu3BkjIyOEEBgbG/PmzRty5syJkZERZmZmCCEQQijx5N69exw+fJi6devKyrj/QZdYzJ8/P02bNlWSg46OjlhbW/PixQuEEDRv3hxzc3OMjY2V87xw4cJcvXpVOeclSSfxcTVnzhwldujO0b+/XEocO8LDwzl+/Dj58uWjYMGC+toFKQ3TJa0nTpxIt27dkjxrGBoaki1bNqVaN/GzhhCCgIAAXrx4Qd26db+8AUKSJL3bv3+/UKlUYtu2bUIIIeLj40VCQoIQQoidO3eK0aNHp7hdSEiIOHbsmGjUqJEYOnSosly3rfR5IiIiROPGjYWDg4N49+6dEOLjfwshhIiNjRUrV64U79+/V9ZP/Ds/evRITJw4UVSrVk08fPgwdRsupaqYmBjRtm1bUatWLREeHi6EEEKj0QghPh4ndnZ2Yt68eSlu6+fnJ0aPHi2qVasm7ty5k2ptln4Mfn5+QqVSiWXLlinLdNeo/fv3i3bt2okXL14k2+7ly5di586dolGjRmLQoEHKchkrUhYRESHq1q0rHBwcREhIiBDin3+rxJ8FBwcLBwcHMW7cOOW6IElCCBEVFSV++eUX0adPH/HmzRshRNJ7jAkTJoibN2+muO2NGzfE+PHjRaVKlcTdu3dTrc3Sj2Pv3r1CpVIJPz8/ERsbK4T469q1f/9+sX///iTr6z4LDQ0V586dEw0bNhTDhw9P9vnnkBUPkqRnERERbNiwgSxZsih9pXR/HjhwgAkTJjBgwIBkpdiXL1/Gy8uL9+/fU7FiRWbMmAEgR9H+D9zd3Xny5AljxoxRymMNDQ3RaDS0bNmSggUL0qVLF2V9AwMDPnz4gKenJ8HBwTx58oR169bJAdt+cK9fvyYhIYFMmTJx4MABunTpgomJCdHR0cp0q507d06yTXR0NMuWLePEiRNYWlqyadMmihYtqqc9kNKqe/fuAaDVann79i05cuRQZq8YOXIko0aNIk+ePEm2uXr1KuPHjydDhgzUrFmTyZMnAzJWfIparaZDhw4UKFAAT09PcuTIofxWcXFxHD9+nCZNmijrJ/4dX716xdKlS3n8+DFTpkyRFQ9SEkePHuXVq1dUr16dHDlyAH/dY7Rp0wZjY+Nk5290dDTOzs48efIEExMTNm/eLLtZSJ/txYsXLF26FAsLC0qWLImpqalSnXnw4EElfvzdtWvX8PT0JDw8HFtbW+bMmQP8h/jxZTkTSZK+pps3b4qePXuKFi1aiO3btwshhDh06JBQqVRi5cqVSkY8sT/++EMsX75cHDp0SFmW0nrSv/fkyRPRokUL0bx5c/HHH38IIT7+ps2bNxedO3cWL1++TLZNUFCQaNeunZg+fboICgpK7SZLenLv3j3Rs2dP0bRpU+Hn5yeEEKJFixaiU6dO4tWrVyluc+fOHXHx4kURGhqaii2VfjQzZswQKpVKLFiwQAghxJEjR4RKpRIrVqz4ZAzYtm2bOH/+vPJvGStSptVqRadOnYRKpRLXrl1L8llsbKxo0qSJGD16tIiKikry2fv378WyZcvEkCFDRJ06dcTt27dTs9lSGhEcHCzWrl0rSpYsKaZOnSqEECIuLk40a9ZMdO7cOcXYER0dLXx8fMS6des+GVsk6d/w8fERbdu2Fe3atRP37t0TQvxVBbFq1apkcUGr1Yo9e/YINzc34ePjoyz/L/FDTqcpSXom/r+S4fbt28ycOZOIiAjKlCnDb7/9xujRo3FwcEj21iQyMjLJoGGJv0f6PLGxscTFxSnjZzx79ox+/fphYmLChAkTmDZtGubm5nh5eSV7E6HLFkdERGBqairH1/iBRUdHM3PmTPr370++fPmAj2+fZ86cyevXr3n//j0FChRg8eLFZM+ePcm2UVFRPH36lCJFiiij40vS59KNJwMwbdo0tmzZQsOGDfn9998ZNWoUDg4OyWZQCAkJSTaWg4wV/2z37t24uLjQpEkThgwZgpWVFVqtlrZt25I+fXoWLVqUZJwfgCNHjuDm5katWrXo378/hQoV0k/jpe9OTEwMZ8+epUGDBgCEhoayc+dO5s6di729PX/++SdmZmbMmzePvHnzJtlWo9EAYGpqmuT8l6TPkbg6YefOnWzYsAEzMzMaNGjA3LlzGT58OL/++muy40u3XeKZff5zpdwXpywkSfpqdP2kbt26Jbp37y5KlSolhgwZonyeOLt4/fp18euvv4qAgIDUbuYPJy4uTvTv31906tQpydgNQUFBokmTJkKlUomWLVuK58+fJ9s2IiJCTJ8+Xdy/fz81myzpSUBAgFCpVKJ3795J3jrdvXtX9OzZU1SoUCHFfvdqtVqMGTNGtG/fXnz48CHV2y39WLRarfL3mTNnCpVKJXr27CmCg4OTrXvz5k1RpUoVceDAgdRsYpoUHR2dpGJt//79olSpUmLSpEni8ePH/1j1pvPkyROhVqtTo7lSGjJq1ChRtWpV4evrqyx79+6dWLVqlahSpYqoUKGCUgWXuM+8Wq0W7u7uwtXVVVYoSf9Z4mNox44donXr1kKlUonp06cLIZKP13Dr1i3h4uLy1ccsk537JOk7oBsxtmTJkkycOJHy5cvz+PFjfH19AZRRZ+/cucPw4cOJiYmhXLly+m30D8DAwAAbGxvev3/PmDFjeP/+PQBWVlasWrWKUqVKER0dTXBwMAkJCcp2kZGReHp6snHjRuLj4/XVfCkVlS1blrVr13L37l3Gjx9PcHAwACqViokTJ1KmTBn27t2Lt7c38PGcjYiIYNasWRw5cgRXV1c504n0RRJfY4yMjJR/jxs3jl69enHhwgV8fX15+/atst6tW7cYPnw4JUuWpGnTpqne5rRErVZTq1YtfH19ld+2WbNmzJo1Cz8/P5o1a0b69OlZsGBBsqo3tVrNhg0bAChYsGCySkRJGjFiBAULFmTdunXKPV22bNlo3bo1AwcOJDY2liVLlgB/zW4UGRnJrFmz2L59O/b29nIsFuk/MzQ0VO5j27VrR8+ePbGxseHPP/8kMDBQeQ4BuHPnDv369ePVq1dff8yyr5rGkCTpHx07dixJP9u/+3vlQ4sWLZR+Vffu3RN16tQR/fr1U9aXWfAvp/ut4+LixMqVK0WDBg1E3759lVkKhPir8qFZs2bi0qVLIj4+XsTExIhJkyaJsmXLyn68P5n4+Hhx5swZYWdnJxwdHVOsfGjWrJnYsmWL0Gq1wtXVVZQtW1bcunVLj62W0qJDhw6JKVOmKP9OXOnw93+7u7sLlUolFi1aJN69eycePnwofvnlF9G3b19lHRkrUhYRESEaNGggHBwcUqwaOXLkiChTpowYMmRIstlC1Gq1mDx5slCpVOLp06ep1WQpDdGdp8HBwaJ9+/aiadOmSfrK6yofSpQoIdzd3YUQH2e+mDRpkrC1tZWxQ/oily5dEg8ePEjxs79XPrRq1Uq0a9dOqWy4ceOG+OWXX0T//v2V9b7m7EdyjAdJSiVRUVH06dOHu3fvsnLlSipXrpzieuJvYz68f/+e+vXrs2fPHooUKcLKlSsBOSL516D7DbVaLWvXrsXX1xdra2vmzJlDlixZgL/GfDA0NGTixIkcPHiQPXv2sHXrVkqWLKnnPZBSW0JCAufPn8fZ2RmVSsXMmTOV/t66MR/evXuHiYkJjx49wtvbWx4n0meJjY1l/vz5rFu3jl69ejF27FiAZH28/z7mg7e3Nx06dODUqVMUL16cVatWATJWfIparaZVq1bkz58fT09PLC0tU/ytDhw4wJgxY2jevDnDhw8nX758REdHM2PGDPbt28eWLVvkOS59ku48DQ4OZsiQIURFRdGrVy86duwI/DXmw7x58+jcuTOGhobs2LFDxg7pi4SGhlKrVi0qVaqEq6srhQsXTrZO4uucn58f69evJ126dPTu3RsvLy8KFiz47Z41vloKQ5Kk/+nJkyfC0dFR2NnZKbMmpESXkbx9+7bo3r27UKlUSeZel2+vvh7dbxkXFydWrFjxycqHFi1aCJVKJSpUqCDfQvzg/ld2/58qH+7duyfatWsn7OzsxJ07d751U6Uf1PPnz8W8efNE6dKllT64QiSvfIiLi1P+7uHhIVQq1SfHB5L+EhkZKRo2bCj69Okj3r17JxISEpTfKjY2VixatCjJ+vv27ROlSpUSzs7O4sGDB2Ly5Mmymkn613Tn7atXrz5Z+bB27VqhUqmESqWSx5X0n5w5c0ZUqVJF9O3b95NjNCSODX5+fqJVq1ZCpVJ986pqmXiQpG9Mo9GIiIgI5d8vX74U3bt3/5/JB41GI4QQIjAwMMVB66TPExsbK96+fZviZ/8m+fD06VPRq1cv+TD5g4uOjhZTpkxJNpXe3/1T8uHhw4fJyrIl6X8JDw8Xb9++FZGRkUIIIUJDQ4Wnp+f/TD7ExMQoA5cePXpUWS5jRcoSEhKEs7OzUKlUYvPmzUk+i42NFc2bNxeNGjVKMuCwEB+TD7a2tqJixYqiYsWK8uFQSiIyMlKJGyklr/9X8iEkJERs2bJFPH78OFXaK/1YdMec7s+zZ8+KcuXK/WPyITE/Pz8xd+5c5d/fKn7IrhaS9A2dOHGCPXv2cPv2bcqVK0f9+vVp1KgRwcHBjBkzhsDAQObPn0+VKlWSbKfRaDh//jwHDhzA2dmZHDlyALJk9ktptVo6deqEtbU1zs7OyaaXg6TdLtatW4ePjw/W1tZ4enqSOXNm5XuMjY1Tu/lSKjp48CCurq6UK1cOJyenfyx1TdztokSJEri7uyebDk2S/o2jR4+ybt06AgMDyZgxIz179qR9+/ZKN7B169bRpUsXJkyYAPx1LYqLi+PkyZNs3ryZcePGUaJECUDGiv/l0qVLzJ8/n8jISBwdHWnTpg0JCQm0bNmSzJkz4+XllWzKTIA9e/Ywe/ZsVq9ejY2NjR5aLn2PhBBMnz6dzZs3s27dOuzs7FKctjalbhd9+vShffv2ST6XpM9x/vx5zp49y7NnzyhbtiwNGjTA2tqac+fOMXToUCpVqsTYsWOVgSJ1x2ZcXBznz5/n5s2bDBo0SDlev2X8kFFJkr4RX19fnJ2dCQ8Px9ramiNHjuDu7s6ePXvInTs3M2bMoFixYjg5OfHHH38o22k0Gs6dO8eoUaOIiYlRkg6AvJH8QsbGxrRp04bDhw+zdOlSQkJCkq2jG/HX2NhY6X/57NkzBgwYQEREhPI90o+tadOmjBw5kmfPnjF37lxu376d4npCCAwNDalevTqenp74+/szbdo0OcuJ9Nl8fX0ZPXo0RYoUoU2bNlhbW+Ph4cGGDRuwsLCga9eu9OrVi23btjF9+nTg47UoOjqas2fPMnnyZAwMDJSkA8hY8Sm6Ud0rV67MqFGjSJ8+PRs3bmTnzp20adOGTJkyMXfu3GRJh/j4eLRaLa1ateLw4cMy6SAlYWBgQJs2bahbty4DBw7E398/ySwBOkZGRmi1WnLnzs3ixYvJnDkz8+bNY9euXcrnkvQ5duzYgZOTE2fPnuXGjRvMnTuXUaNG8fDhQ2rUqMHixYu5fPkys2bNIjAwEPh4vGo0Gs6cOYOzszMPHz5MkiT7pvHjm9RRSNJPztfXV5QsWVJs2LBBKde/cuWKqFKliujSpYsICwsTQnws33dwcBB2dnbi8uXLIi4uTvz++++iatWqYuDAgcr3fc0RZX8mifs/CyGEj4+PsLGxES4uLimOYJ6YVqsVy5YtEy1btvzHudultC8yMlLs3LlTxMTEKMu8vb1F48aNRe/evcXNmzc/ua1arRZCCHHhwgXx6NGjb95W6cfi5+cnVCqV2L59u4iKihJCfDymRo4cKSpUqKDMlhAcHCzmzp0rypQpI2bOnCmEEOLUqVOiSpUqSWKF7F7xz/4eS//880/RuXNnUa5cOdGgQQOly0ri3zEiIkKsWLFCnDlzJlXbKn3/YmNjxb1795R/37lzR/Tr10+ULVtWmcEspfs33fEVEhIievXqJWdFkb6I7p5248aNIiQkRAghxNKlS0XZsmXFuHHjlPuT8+fPi/Lly4u+ffuKJ0+eiNjYWHHy5ElRrVq1bzZ7xafIxIMkfWWXL18WKpVKuLm5CSFEkkGrVq1aJWxsbMTdu3eV9YOCgoSDg4OoUaOGWL58uahevboYMGCA8rm8kfwysbGxonfv3mL+/PlJln8q+ZD4dw4KClJuGhKP8yD9mDZu3ChUKpVYs2aNiI2NVZanlHxIfJw8efJE/Prrr2LLli2p3mYp7bt27ZooUaKE6N69u3Lc6Y6vY8eOCZVKJY4cOaKsHxISIubNmyfKlSsn+vXrJ2rUqCFjxb8QFRUlFi1aJEaOHCnc3d3FyZMnk3x+9epV0blzZ9G8eXOxZ88eZXlCQkKSKTNlYlFKTKvVCgcHB9G9e/ckYwJ9KvmQ+KEuKChIrF69Wjx79kyet9IXOXPmjFCpVGL9+vVCiKRj//Tv31/Ur18/yTg1iZMP3t7eomrVqkmSDql1HMpaPEn6ytRqNRUqVODgwYNcvXpVKWkCSJ8+Pebm5knK76ysrJg2bRolSpTAy8uLcuXKsWzZMkD20/0vgoODMTQ0ZPfu3axevVpZ3rFjR9zc3PDx8UnS7UL3OwcFBeHh4cHEiRMJDQ1VptWUflwtW7akf//+eHp6snHjRuV87dKlCz179uTFixfMmzePmzdvKsfJ06dPmTt3LmfOnMHW1lafzZfSKCsrKxo0aMCbN29YsmRJkuu9ubk5hoaGmJubK+tbWlrSrVs3HBwcOHXqFLa2tjJW/A9qtRp7e3t27tzJzZs32bJlC2PHjsXX11dZx9bWFmdnZ8zNzVm9ejV79uwBPnZ7nDlzJnv37mXnzp1YW1vrazek75CRkRGNGzfmyZMnrFy5kmvXrgFgY2PDiBEjsLOzY8CAAZw/fx4DAwOllP3Zs2dMnz6dJUuWYGBgIM9b6bMIIdBqtbx9+5bMmTNz9uxZZWyQqKgoAKytrTEwMFC6CQPY2dmxdOlSrl69ytSpU6lSpQrLly8HUjl+pEp6Q5J+Am/evFH+7u/vL7p16yYqV64sLl68KIT4OFp+w4YNxciRI1Pc/uHDh0lG2JZZ8C8THx+v/Hb3798XI0eOFLVq1RIrV65Msp6u8mHy5MlKiVpQUJAYPHiwKFu2rLh9+3aqt11KPVFRUeLEiRPKv8PDw8XcuXOFjY2NWLVq1ScrH27duiVCQ0PFoEGDRLly5eQsJ9Jne/HihTLTUWhoqBg5cqRo0KCBmDNnjrJOo0aNkkyhnNjz58/FwYMHlX/LWJGyiIgIUa9ePeHo6KiUw587d040atRItGjRQoSEhCR5C63rdtGqVSvx22+/CXd3dzllppRMXFxckuNm586dws7OTgwePFhcvXpVWX7nzh3Rv3//JJUPjx8/FoMHD5bTcktfTHdvEhERIfbv3y+qVKkievXqpcyGFB0dLWrWrCkmTpyY4vbnzp0T7u7uyr9TO37IxIMkfQWnTp0S9vb2SR5kzp8/L7p37y6qVKkiLly4INq2bSs6d+6s3HD+08kubyS/jFqtFu7u7uL06dNK2dm/ST64uLiIP//8UwwZMkSUK1dOJh1+cDExMaJ169aiXLlyYseOHcryf5N86NGjh+jSpYs8TqQvcunSJVGqVCmxY8eOZMmHRo0aidmzZ4tmzZqJLl26iHfv3gkhkk+fmZiMFSmLjY0VTZo0ES1bthSRkZFJfqe9e/cKlUqlJCMSf3b58mXRrVs3UapUKWFraysfDqUk1Gq1aNiwoViwYEGS5MOOHTv+Z/LBz89PjBw5UsYO6YudPHlSDBw4ULx+/VoI8fF43Ldvn6hSpYro16+fUKvVokWLFsLe3j5Z972U6CN+yCHaJekriIuL49WrV2zatAlDQ0Nq166NnZ0dAEuXLsXR0ZFChQrh4+ODsbGxMiL+p8jSu88XHx+Pvb09Dx484Pnz56RLl45KlSpRrFgxBgwYAMCmTZsA6Nu3L/Cx2wWAm5sbe/bswdjYGG9v7ySjw0s/ngsXLnD37l3y5MmDt7c3Go0Ge3t7smTJQp8+fQCYO3cuAA4ODpiamtKlSxeMjIzw9PRECMHWrVvlyPbSZ6tUqRKVK1dm9uzZGBkZUb9+fbJmzcqkSZOYNm0a27dvJ0OGDKxcuZJs2bL9z+n1ZKxIWWBgIJkzZ+bp06c8efKEkiVLEhsbS7p06ShatChFixbl7t27fPjwgRw5clCoUCEAKlasyNChQ1m5ciXjx4+naNGi+t0R6buyYcMGgoKCWLp0KYaGhgwZMgSAdu3aAeDp6cmqVavo27cvtra22NjY4OTkhImJCePGjcPExAQfHx95jyF9kYCAAG7duoWHhwfjx48nR44c1KlTBxcXF9zc3KhYsSK2trYsWbIEU1NT4J9jhD7ih0w8SNJXUL9+fYyNjZk5cyZr1qzBwMCAWrVqYWdnR3x8POnTpycgIICbN29Srlw5EhIS5LRJX5mRkRENGjTg9evXnD17lrCwMMaMGUOFChX+Z/JBCMHcuXPZsGGDfJj8CdSpU4d69eoREBBA7ty52bp1K0ZGRnTs2PEfkw+dOnXC1NSU8uXLU7BgQX3ugpQG6frRrlu3jgEDBuDu7g6gJB8mT56MoaEhV65cwcfHBycnJ4yMjOT4DZ9B/P/89CVKlGDixInMmjWLXr16sWrVKsqWLQvAvn37ePjwIc7OzgBkyZKFevXq8csvv1CuXDmqVq1KuXLlSJcunT53RfoOlS5dmmLFipE7d26WL19OdHQ0Y8aMAf45+dC3b1+yZ89Ot27dKFasmD53QUrDnJycSJcuHbt27WLatGlMmjRJST5MnjyZRYsWYWRkpIxN9j3GDgMh/jbJrCRJ/5ru9NENGnTq1ClmzpyJpaUlv/76K7Vr1wbA39+fpUuXcvfuXVasWEGFChW+ywtCWufv78+6deuoVasWGzZsIEOGDLi6ulKhQgUMDQ158OABy5cv59KlS/To0UNJPsDHQcgSD+Qm/Zi0Wi3Gxsb4+/uzatUqKleuzJ9//smLFy/o3bu3UgXz/v171qxZw6pVq3B2dqZr167yQUT6zxJf9wcMGMDly5eZPHky9evXx9zcnLCwMKZNm8b169dp1qwZw4YNw8jISHmglj4tOjqa5cuX07hxY0qWLAnA9evXmTVrFg8fPmT37t3s27ePBQsWMGrUKEqXLs3bt285e/Ysv//+O6GhoRQrVgxfX1/SpUsnf29JoTv/4uLi6NmzJ+nTp6dp06ZMnTqVXr16MWrUKGXdnTt34unpSYUKFejXr5+S8NJoNMpbaEn6XIljx+LFi9m7dy8lSpRQkg9qtZpTp07h5uZG6dKlWbZsGaampt9f7Ej1zh2S9APQ9a8SIvk0SSdPnlT6gp86dUpZ7u/vL3r06CEqV64sLly4kKrt/dEl7gP966+/iv79+4u3b9+KBg0aiNatW4tLly4lG3Cybt26YuHChfpqspSKUurH+Pr1a9GpUyexcOFCERQUJHr37i2aNGkifHx8lHXCw8OFl5eXUKlUYuPGjanZZOkH8fz5cxEVFZVkWeLjsX///qJixYpi9+7dypzroaGhYvTo0aJhw4bCzc0tVeZW/xEcPXpUqFQqMXbsWGX8BiE+TlvauXNnUapUKaFSqcSJEyeSXRM+fPggDhw4IJ48eZLazZbSCI1GI4QQ4sqVK6Jhw4bCz89PrF27VtjY2Ih58+YlWXfHjh2iVq1awsHBQdy4cUMfzZV+ANHR0UKIv2JG4uvWokWLRKNGjcSwYcOUwe11Yz5Uq1ZN9O7dO8k4Vd8L+bpVkj7TyZMnGTx4MCdOnAD+qnYQ/1/9UKdOHcaPH8+bN2/YsGEDAQEBAFSrVo0hQ4ZgaWnJ/v379dP4H0hsbCx//PEHQJJuK5MmTeLhw4dcvXqVdevWERYWxowZM7hy5QoJCQkUK1aMgQMHUrx4cQ4dOkRYWJi+dkFKBbrp9DZs2MDVq1eV5Tlz5mTAgAGsXbuWmJgYJkyYQN68eVm3bp0y1V6WLFlwdHRk6NChVK9eXU97IKVVAQEBNGzYkP379xMTE6MsNzQ0JCEhAYDly5dTqVIlpk+fzpUrVwDImjUrEydOpGDBgpiamn5fb6u+Q2q1mqVLl9KgQQPGjx/PqVOnWL16Nffv3wegbNmyjBs3jl9++YX06dNjaWmJoaEh8fHxwMfxgTJlykTTpk1lFypJER0dja+vrxI3TExMAMibNy9FihQhMDCQbt26MWzYMFasWIGXl5eybbt27Rg4cCDBwcHkyJFDH82X0rhTp04xatQonj9/jqGhoTI2nC52DBkyhJYtW3Lv3j1mzZpFWFgYGTNmpF69ekyaNIlz586xYcMGPe9FCvSd+ZCktOb8+fOiatWqwsHBIUlFw98rH37//XdRpUoV4e7unuSN/MOHD1O1vT+iqKgo0bZtW6FSqcSkSZPElStXlBHiw8LCxMiRI8XYsWOFEEI8efJE1KpVS7Rt2zZJ5cPDhw9FcHCw3vZB+vbi4+PFhAkThEqlErVq1RK9e/cWzs7OIiQkRJl6auDAgco0hgEBAaJ3796iWbNm4rfffkvyPZL0uWJjY8WAAQNE5cqVhZ+f3ycrH7Rarejevbto3LixiIuLUz7XHaNCCFn18AkRERGiVq1aYsCAAcrvu3btWlG1alUxZsyYJJUPAQEBokuXLqJKlSrKbBXyd5VSEhMTI6pUqSJUKpWoW7eumDVrlnjw4IFyL7d7925RqlQp5fhavnx5ipUPHz58SPW2Sz8GLy8vUaNGDTFy5Ejx/PlzIcRf1ytd7EhISBBeXl6ifv36Yt26dcrxGRUVJQICAvTS7v9FVjxI0mcQQmBnZ8fChQt59uwZK1eu5PTp00Dyyoe6desyaNAgfvvtN16+fKl8R5EiRZKsJ32+48ePc/fuXSwtLTl8+DBLly5lyJAh3LhxAwsLC3r37s3evXs5fvw4BQsWZPPmzbx7945Zs2Zx8eJFEhISKFKkCLly5dL3rkjfUEJCArVr16ZixYpERERQr149Hj58SJ8+fZg5cyYvX76kVq1a7Nmzh9evX1OuXDmGDRtG/vz58fLyYteuXYCcOUD6fEIITE1NWbBgAdWrV2fq1KkcPnyY6OhoZR3d2ysjIyNGjx5NaGgox48fBz4eu2ZmZsp3yaqH5NRqNa1ataJw4cK4urqSPn16AHr16kX//v05ffp0ksqHcuXKMW7cOIoUKUK/fv24fv26/F2lFKVLl06pfilZsiT79u3D3d2dESNG8Pz5c5o2bUrLli3ZvHkzGo2GLl26MGLECNauXcv06dOV75HjRkmfS/ds4OTkRNeuXbl+/Tqenp68ePECAwODJJUPBgYGDB8+nMKFC7Nnzx6l+jdDhgyUK1cOQKmQ+F7IuylJ+gy6m5QqVaowffp0Xr58mSz5IIRQTvQSJUqg1WoJDw//5HdJn69FixY4OzuTM2dOKleuTOXKlSlcuDAODg6MGTOGoKAgHBwcOHDgAGFhYRQoUIDNmzfz4MEDlixZgkaj0fcuSKnA2NiYevXq0a9fP3Lnzs2uXbtYs2YNPXv25O3btzRv3pw3b97w+vVrVq9eTUJCAra2tgwYMIAKFSpQoUIFfe+ClEbpru+mpqbMmTOHWrVqpZh80K1nZmZGTEyM8u/EyS4ZK5KLjIxUBnxdtmwZuXPnxsDAQOk+8ankg67bRdasWRk1apSMBVIyumPIx8eHihUr8uDBA/r370/jxo3RaDR07NgRT09PwsPDefLkCWFhYWTOnBl7e3v69u3Lnj17CA0NBeS5K32+xMfMoEGDaNWqFTdv3kwx+aDVajEwMKBDhw48ePCAFy9eJHup+b29OJHTaUrS/xAUFMTr1695+fIl5ubmVK5cmXTp0mFnZ6dMZ7Ny5UqEENSpUyfJSf706VOsrKzInDmzHvfgx6Kb197R0ZHY2Fj27t0LgLu7O02bNmX//v24uroSERFBnjx5iIiIIGvWrFhZWbFv3z60Wq3yZkz6MelGfxZCYGJiQvXq1Rk/fjwuLi7079+fZcuW0aFDB3x8fDh58iQWFha8f/+eqKgozM3NKV++PCVLlpSzWEif5datWzx58oRr166RM2dObG1tsbW1JV26dMyfPx8nJyemTp0KQMOGDcmYMSMGBgZotVoCAwPJkycP2bJl0/NefP/UajXt27fn6dOnlClThosXL1KnTh3gryoSQ0NDevXqBcCKFSsA+PXXXylevDhly5Zl5syZZM2aVc4yICVjZGSkzH60ZcsWOnbsyMqVKxkxYgTLly9nx44dXL58mQsXLhAdHc3BgwdxdHQkc+bM9O7dmx49epA1a1Z974aUxrx7946wsDBCQ0PJlSsXOXLkIGPGjAwdOhQhBHv37sXT05PRo0eTL18+4uPjMTY2RqvVcufOHYoVK0aWLFm++2SXnE5Tkv7Bnj17WL58OaGhobx//x4hBAULFqRJkyb8+uuvZMqUifPnzzNp0iRy585N165dadGiBTExMdy+fZvRo0dTo0YNZb526evQ3RQArFq1iu3bt2NjY6P8d7h//z6rV68mNjaWESNGUKhQITl96U8gNjaW+Ph4pUQd/kpCaLVazp8/z5QpU8iYMSMbNmwgW7ZsvH79mrdv35IuXTqKFCkiy9qlL7Jr1y4WLlyIEAKtVktoaCgJCQm0aNGC9u3bU61aNYQQDB8+nNOnT+Pk5ESLFi3IkiULf/zxB5MnT6ZixYp4enrqe1e+a7ruFUWLFqVZs2Zs2LABU1NTBg4cyC+//AJ8LFXWvREEWLduHStWrKBu3bo4ODhQokQJPe6B9D1KSEhAq9UmmX4wLi5OGVDS3t6ewMBAXF1dadGiBVqtlmvXrnH8+HHatGlD8eLF9bwHUlp24MABNm7cSGBgIDExMcTHx1OrVi1atmxJixYtAFiwYAH79u3DxsaGUaNGUahQITQaDTdv3mTMmDHK4LrfO5l4kKRP2LNnDxMmTGDAgAHUrFmT7Nmzc/fuXZYtW8bt27epU6cOs2fPJkuWLPj7+zNnzhxev35N4cKFMTQ0JCgoiBIlSrBkyRJA9tP9UlFRUaxdu5YaNWpQvnx5ZXniObHXrFnDtm3bKFasGCNHjqRo0aLExMSg0WhktclPIiYmhjp16pAuXTp69uxJlSpVKFOmTJJ1dMkHNzc3MmTIoCQfJOm/OHjwIGPHjmX48OHUqVOHokWLcvnyZc6dO8eKFSsoVqwYw4cPp169egBMmDCB/fv3ky1bNkxNTYmJicHW1paFCxcCMlZ8SkxMDK1bt8bS0pK5c+diaWnJyZMnmT9/PqampgwePFipfPh78mH9+vV4eHjQqVMnJk2aJCsdJEVUVJQy9keLFi2Ucbgg6X1Gly5dCAwMZMKECTRq1AgzM7Mkn0vSl9i1axcuLi506dKFihUrki5dOi5fvoyPjw+RkZEMGzaMfv36AbB06VL27dtHdHQ07dq14+XLl1y8eJHixYuzbNky4PuPHzLxIEkpCAoKYujQoTRs2JB+/folCSwajYbJkyezf/9+6tevz/Tp0zE3N+fBgwf88ccfHDt2DCsrK4oWLUrPnj0B5Nv2L5SQkMDYsWPZu3cvRkZGdO/enerVqys3l4mtWbOG7du3U7RoUUaNGiXfXv9k3r17R6NGjYiMjMTS0hKtVou9vT316tWjdOnSynoajQZ/f3/c3d2TJB/ksSJ9LiEEYWFhDBkyBFtbW4YPH56sG9fRo0cZNmwYpUuXxsXFRUmGHTt2jEePHhEXF0fhwoVp2rQpIGPFp2g0Gj58+ICPjw8dO3YkZ86cymcnT55kwYIFmJiYMGjQoE9WPnh7e2NnZ4e1tbU+dkH6Ti1dupSFCxeSOXNmEhIScHR0xM7OjooVKwJJz0l7e3seP37M+PHjadKkCenTp5exQ/pid+/eZciQIXTq1AkHB4ck8cPf35+FCxcSEBDA2LFjla5jx44d4/jx45w9exaVSoWtrS1Dhw4F0kb8kIkHSUrBn3/+ycCBA1mwYAF2dnbKcl2Jf0xMDM7Ozhw7doxJkybRpUuXTwaetHAh+F5ptVqWLVvGqlWrsLa25vnz5wghqFq1Kn379qVIkSJkyZJFWX/VqlX4+vpiY2PDsGHDKFq0qB5bL6UW3YCunp6eHD9+nJo1ayKE4LfffiN79uzY2dkxZMgQsmTJgrm5ORqNhgsXLjB9+nRiY2Px8/OTfXKlL/Ly5UtatmyJu7s7zZo1A/5646T7c9++fYwePZq+ffsyatSoT36XjBUpU6vV1KpVi0mTJtGuXTsl1ib+vf5t8kGS/u7x48d07NiR7NmzU6dOHby9vcmSJQsNGjTAwcGB/PnzJxnvx97enufPnzNs2DBat24txwKSvti+ffvw8vJi2bJlSncd3ThmAFevXsXNzY0XL14wd+5catasqWyrVquTzJqSVuLH999CSdKD+/fvExMTg42NDfDXKMfGxsbEx8eTPn16ZsyYQb58+Th+/HiyqTQTSwsXgu+VsbEx3bp1I1u2bBQvXpyDBw/i4ODAnTt36NOnD05OTly4cIGwsDAA+vbtS+fOnblw4QLLly8nLi5Oz3sgfUu6t6AGBgYYGRlRp04d3rx5Q7Zs2XB1dcXb25vy5ctz6tQp2rdvz5QpU7h+/TqmpqbUrl2bCRMmkClTJtRqtb53RUqjwsPDiYyMTNKlSxcPdH82atSIli1b4u3tnWRq5b+TsSI5tVpN27ZtKV26NDVq1EiS4NcNIAvwyy+/MHz4cOLi4li6dCknT54EPv43kG+jpb/T3dMBWFtb0717d16/fk3btm3Zvn07devWZc+ePcpMWQ8fPuTDhw8AbNu2jSxZsrBixQo5K4r0RXQz3924cQMhBIUKFQI+PkMYGRkp17Vy5coxePBgPnz4wOXLl5Nsm3gsq7SUXE0brZSkVFakSBE0Gg379+8HULKPur9rtVrMzc1p1KgRN27c4NWrV4CcOulrUKvVeHl5AR8vptmyZcPR0ZG9e/cSGBiIk5MTu3btwsHBgbCwMHr37o2rqyvbtm0DoE+fPowZM4ahQ4cqA0NJPx61Wk2dOnXYu3evEoirVatG69atWbNmDYGBgZQpU4ZZs2bh5+eHVqvl6NGjdO3aFRcXF/bu3UudOnXw8fHByspKz3sjpVUmJiYYGRlx8uTJTz6EmJqaUqNGDSIjI2WS6zPoBpLMmzcvc+fOJXfu3CnOSZ9S8mHFihUcPXoUkHFZSkqtVjNy5EjlQQ4+TpFuZGSEn58fpUqVYty4cRw9epQGDRpw5MgRunbtyvTp0/n9998B2L9/Pxs3biRTpkz62g0pDdMlCaysrAgJCeHhw4dA0qS17rpWv359qlevzsmTJ4mOjla2TatTLsvEgyQBb9684c6dO8rcy7lz5yZLliwcOnSIp0+fJltfN6NC/vz5iY6OTpI9l76c7kbzxo0bqNVq5WJapUoVsmbNys6dO4mOjsbCwoIRI0Zgbm6Oubk59+7dY/r06TRt2pSDBw/SsWNHChYsqOe9kb4VtVpNu3btKFKkCA0aNEgSgBs2bIiJiQlbtmwhISEBU1NTZs+ejbGxMZMnT2bAgAEcOHCAWbNmERoaSoYMGfS4J1Ja8+jRI/z9/ZWkdLFixWjQoAH79u3jyZMnAEkejnV/13X7io6OTt0Gp1GRkZG0b98ea2trPD09sbS0VEqJNRoNu3btAv6qaEicfHByciIkJARvb2+ioqL0uBfS90atVtOiRQvCwsKSdMWsXr06jRs3ZseOHbx48QJzc3Ny5MhBeHg4BQsWpG7duly6dIlBgwYxbtw4EhISyJcvnx73REqLIiMjk1S9FSpUiPj4eDZv3kx4eHiSdQ0MDJT4kT9/fqKiotBqtanZ3G9CJh6kn96hQ4cYOXIkvXr1Yvr06Wg0GgoUKICTkxNXrlzB29ubt2/fKuvrkgwajYagoCAqVKhAjhw59NX8H4ZaraZ169ZYWVnh4eGRpO9ayZIl6dy5M/v27VOqS5ycnHjw4AGrV69m6dKleHp6kjlzZlQqlb52QUoFf38LmitXriRdnGrUqEGFChU4c+YMsbGxjBo1irNnz+Ll5UX79u0ZMmQI27dvZ8eOHXJGC+mz7N27l5EjR+Lq6sr58+cJDAwEoGPHjhgbGzNs2DBCQkKSJMIMDQ2Jj48nICCAYsWKkTt3bn01P82Ij4+nf//+PH36lO7du5MzZ06llFij0dC2bVt27NiRJKmQOPlQp04d3NzccHNzS1KOLP3cdLGjUKFCzJkzBwsLC+Cv5GDHjh0xMjJi3bp1wMd7DH9/f1xdXZk1axYrV67Ezc2Nvn37ppmydun7cezYMcaNG0ejRo3YvHkzADVr1qRBgwYcOHCAI0eOEBkZCXw8JnXXvPj4eCIjIylRokSS++K0Sg4uKf3Udu7cydSpU+nZsyfVq1enVKlSZMyYEUNDQ0JDQ1m8eDFbt26lS5cutG/fnlKlSgEfb4xu377NyJEjadq0KSNHjtTznqRtuqSDtbU17u7u5MmTR3m7pfszMDCQX3/9lcqVK6NWq7l8+TLz5s2jevXqyk2AHF36xxYdHU2TJk3IkycPixYtImfOnMqAr1qtlkuXLmFnZ8fNmzfp0aMHGTJkID4+nvnz5yultJL0JXbt2sWkSZMYMmQIdnZ22NraKtebuLg4Nm/ezMKFC7G0tGTq1KkUL16cbNmyERUVxf379xk9ejS1a9fGxcVF37uSJuzatYu5c+dSunRp+vTpQ6VKlYiLi6Nt27aYm5szf/78FJM4aWWANSl1RUVF0bZtW/Lnz8+cOXPImjWr8mCXuJJm2LBhPH78mOzZs/Po0SPmzJlD9erVZeyQ/pMdO3Ywffp02rVrR+nSpalatSo5c+bE2NiYkJAQBg8ezIsXLxg8eDDNmjVTXooIIbh58yZOTk7Y29vTt29fPe/Jf2es7wZIkr5cuHABT09PnJyc6NKlS7Jp0LJly0bv3r0xNTVl/fr1nDp1irp161KqVCnu37/PsWPHKFasmJJ0kA+9X0ar1TJmzBhevHjBjh07sLCwUObG1mg0eHl50aVLF4oUKUKVKlXYvXs3VlZWLF68mAoVKqTZfm7S57t//z4hISHY2NgQHR2NEAJjY2NiY2Pp0KEDNjY2VKpUifz581OhQgUuXrzI9OnTqVq1qnwYkb7Y9evXWbBgAcOGDcPR0VGZXlk3m4qJiQndunXD1NSUjRs30r9/f0qUKIGtrS3Pnz/n4cOHqFQqJekgY8X/1qZNGwwNDZk1axYbNmwgISEBd3d3zM3NmTdv3icrR+R5Lv2dEIJp06bx9OlTunbtqjzUGRgYoNFoaN26NaNHj6Z+/foMHz4cBwcH3r17x6pVqyhfvryeWy+ldadOnWLmzJkMGzaMDh06JKtayJUrF9OmTWPKlClMmzaNw4cP07VrV9KlS0dQUBCbN2/GxsZGSTqk9fghr9DST0dX5OPv76/Mn/73pINO/vz5GTlyJIsXLyZnzpzs27cPV1dXbt68SYsWLVi6dCnw8S1LWr4Q6FNMTAylSpUie/bsTJ48Gfg4GFtUVBQtW7bkwoULyoV6+PDh5M+fH2tra6pUqaKMtSH9HGxtbVmxYgV//PEHs2fPJjQ0FI1GQ4cOHUifPj2jRo3CxMQECwsL+vXrR3x8PGFhYUlGv5ekf0t3zFy9epXMmTPTqFEjJekAHx9yjYyMlLFEOnfuzJIlS+jWrRtxcXEcPnyYdOnSYW9vz5IlSwAZKz5Fo9Fw9epVTp06pYyV0apVK8aMGcOVK1fo378/ACtWrCBv3rxJzme1Wo2Pjw/Pnj3TR9Ol75yBgQGdOnWicuXK7NixA19fX+Dj+d2hQwdMTU2Vata8efNiZ2dH5syZk5zrkvS5dInpgwcPUrVqVVq1aqXcy/79fsTGxoa1a9fSuXNnXrx4wZgxYxgyZAj79u3jl19++aHih+xqIf2U4uLisLe3J2/evCxatCjFdf6eVfzw4QPGxsaEhYWRM2dOJSjJ0s7/LiIigh07drB06VJq1KiBl5cXrVq1wszMLElJbWRkJB4eHpw8eZJly5ZRunRpPbdc0oeTJ08yfPhwatasyePHj8mcObNS5g4fz0mNRsPYsWOVcVrkzBXSlxo8eDDv3r1TZs75N+Li4oiLi0syxoCMFSlTq9UMHjyY+/fvExYWRt68eWnXrh1DhgwB4ODBg0yZMoWSJUsyfPhwypUrp2yriwm+vr4cO3aM/Pnz62kvpO+V7l7uxo0beHh4EBkZSdeuXdm0aRMZM2Zk3rx55M2bV1n/+PHjDB8+nEmTJmFvb6/HlktpXUREBC1atKBt27Y4OTn9q22Cg4N58+YNADlz5lTuf3+U+JH290CSPoNuYMiYmBiMjY2VN+YpTYOmSzq8e/cOtVpN5syZMTMzI1++fElKbX+EC4E+CSHIlCkT7du3Z+DAgZw7d47SpUuTMWNGVq5cqTxMCiHImDEj9vb2vHnzhvPnz+u55ZK+/PLLLyxcuJCLFy8SFBTE6NGjkxwnhoaGpE+fnvLlyxMXF/fJiiZJ+pTEsxmZmZnx4cMH5d8pva8RQqBWq5Xp9kxMTNLsPOupSTe+j6GhIWPGjGHFihVkzJiRtWvXsmPHDgCaNm2Ki4sL9+/fZ/ny5QQEBAAf++17eHiwb98+duzYIZMOUop093JlypRh3LhxZMyYkZkzZxIVFZWkgibx9IVly5Zlw4YNxMXFyWo56YvFxsYihFDGCImLi/vkurqplnPnzk2ZMmUoU6aMknT4keLHj7EXkvQv+Pv707ZtW7RaLZkyZaJ48eKcPn2aly9fYmpq+sngcubMGbp27UpsbGyyz9J6ydP3QDcaeaZMmejQoQMDBgzA0tISMzMzMmfOjKGhIVqtVlmvVKlS9OrVi/r16+u76ZIe1alTh/nz52NsbMyGDRuUB8XEU1A5OjqyZ88ecubMqc+mSmnMgwcPcHJy4sKFCwCUKlWKp0+fJpnC8e/xwsDAgGfPnrFw4cIUp2CWsSK5qKgoWrVqRfHixfHw8KB169bUqVOHtWvXYmZmhr+/v7Ju8+bNGTt2LDdu3GDFihX4+/szd+5c9uzZw5YtW5RSeUn6J2XKlGHChAmULFmSdOnScfz4cSD5Od2jRw+WLVuGiYmJPHelz3LgwAHmzZsHQJYsWTA3N+fKlSvAx4R04umWE9u2bRuzZ89O8bMf6RiUiQfpp5E5c2aMjY3Zt28fANWqVUOr1TJv3jxCQ0OTPLDoxMTEcOfOHaytrUmXLp0+mv1D0Wg0BAcHJ1v+9+RDjx49uH79ulJqa2xsTHx8vHLxHTlyJEWKFEnVtkvfnxo1arBgwQLOnDnDnDlzlL7humQVoFRCSNK/ZWhoiIGBAbdu3QI+vgE1Nzdn27Zt3LhxAyBZvIiLi+P333/HwsKC7Nmz66Xdac3q1at5+fIlNWrUIFeuXBgZGRETE0POnDmpW7cuWq2WiIgIZf1WrVoxduxYbt++zeDBg9m5cyfe3t6ULFlSj3shpSW6lxfjx48nW7ZsrFu3jt9++w1IGjeaNm1KoUKF9NhSKa1KSEhg+/btXL58GRMTE9q2bYu/vz8rV64EUGZSSSw2NpYbN24QFhamjyanKpl4kH4a1tbWFC5cmMOHDwMf36DUr1+fffv2sXz5ct6+fYuhoaFSCpWQkMDdu3c5ffo0ZcqU0WfTfwhxcXF06NCBTZs2ASS78OqSD5kzZ6ZDhw4MGjSIP/74Q0k+GBkZKf9tTExMUrfxkl79U6lrnTp1WLBgAWfPnsXLy4vAwEAAOfCo9MWKFClCly5d8PLy4tatW1hZWTFt2jRu377NokWLlLdXutLX+Ph47ty5w549e7C1tf0h5lpPDZ07d6Z58+bMnj2bPXv2ACjdot68eYO/vz/Nmzenb9++LFiwgLdv39KqVSumTp2KhYUF27Ztk5UOkkIIQWRkpFKynhLdfUbp0qUZN24cWbJkYcOGDfj5+QEybkj/XaVKlahSpQpnzpwBoG7dupQuXZr169ezdetWIHny4caNGwQGBlKhQgW9tDk1ycElpZ+CblCWZ8+e0bJlS4YNG0bv3r0B+PXXXzl37hzVq1fH2dkZa2tr1Gq1Mt1myZIlWbx4MZD2p7HRtzFjxnD69Gl8fHwoWLBgioPl6H7jiIgIfvvtN1auXEnx4sXZsGGDnlotpZbo6Gh8fX0JDAxUpk+1sbEB/ve5d+rUKfr370+rVq2YPn26TE5JX0R3TRJCKLOkTJo0CXNzc3777Tfc3d3Jnz+/MmDY27dvuXXrFqtWraJ48eIsW7YMkLHi33rz5g3Tp0/n+PHjTJ8+nVatWrF48WKWL19OzZo1yZo1KwEBATx//hxTU1MKFiyIq6srKpWKDBky6Lv50nciOjqaZcuWcfr0aYoVK8bAgQMpXLjwJ9fXnZ83b95UquVGjRpFq1atUrHV0o8k8TXf29ubefPm4ePjQ+HChbl06RITJ04kLCyMLl26MGTIEExNTYmMjCQgIAAXFxdKly7NwoUL9bwX355MPEg/LLVajYGBARkzZgT+uqFcs2YNJ0+eZMKECZQoUQIANzc3Dh8+zLt378idOzdRUVFkzZqV8uXL4+HhkWR76fPFx8djZGTE3bt3GTFiBDly5GDJkiVkzpw5xfUTJx82b96Mr68v3t7en5y7XUr71Go1PXv2JDQ0lMjISD58+ECpUqUYPnw4tWvX/lffce7cOXLnzi274Uif5fXr15iZmSWrVNBdd2bMmEGJEiVISEjg0qVLuLm58ezZM4yNjdFoNBQrVgxbW1umTJkCyFjxuRInH2rWrMm5c+eYMWMG9evXJ0OGDHz48IFnz56xb98+AgICcHd3p1ixYvputvSdUKvVdO3alYwZM1K8eHGaNm1K2bJlkwzumhLdfcbVq1dZtmwZkyZNkrMfSZ8tJiZGqdTS3esCDBo0iNjYWBYtWoSZmRlXr15l0aJF+Pv7kzVrVnLnzk10dDRxcXGUKVNGGRfiR48fMvEg/ZDOnDnD/v37KViwIF26dMHCwkL57Pr160yZMgV7e3s6deqkLH/w4AFXr14lJCSE7NmzU7x4cSpWrAj8+BeCb0U3i4juQgwf52Ffv349Q4cOpXPnzkk+S0x3U6BWq9FqtUn+G0o/FrVaTatWrbCyssLZ2Zk8efLw559/MmzYMOrWrcuSJUvk22Ppm/j9999Zt24defLkYcKECVhYWCR5c9WjRw+MjIxYv369sk14eDhPnz7l4cOHWFhYULBgQYoWLQrIWPGl3r59i4eHB4cPH6Zdu3ZMnToVAK1Wm6T8PfFNviRFRUXRuXNnsmbNiouLi3IeplRx9E8VlhqNRpmtTJL+rT/++IPz58+TJ08eOnfurHTlMTAw4Pfff2ft2rX07duXOnXqABASEkJgYCAHDx4kKiqKggULYmNjQ6NGjYCfI37IxIP0w/Hz88PT05MSJUrQokUL2rRpk2yd5cuXs2bNGvbt20euXLn+8ftkyeyXiY6OxtnZmZIlS+Lo6KiUxSYkJNC5c2eio6PZsGED2bNn/ykutlLKYmJi6NixI0ZGRvj6+mJsbKycb5s3b8bDw4MjR44oU57pBvWTx4v0X/n5+eHh4UHDhg0pU6YMnTt3Vj7Tvbm6c+cOzs7O9OrVi3bt2v1jPJCx4r95/fo1s2bN4siRI0q3C/hrjBf520qJCSGYP38+Z8+eZdasWUrSIS4uTulqt3fvXt69e6ckED8VO+S5K32uXbt24eXlRYECBejYsWOybjoajYb+/fuTLl06li9f/j+/72e5r/nx91D6qehuWHr16sWMGTOUpINuEBfdnz169MDW1pZVq1YlmyYzpWnSpM936NAhjh49yqZNm+jWrRv37t0jOjoaQ0NDpk+fzqtXr5g7dy6A0qda+vmcPXuWDx8+YGhoyJMnT5S3TwB58uQhf/78vH37lnv37hEZGQn8Najfp6alkqT/5ffff2f69On079+fUaNGKUmHv1dp5cmTh5IlS3Lu3DkSEhL+MR7IWPHfWFpaMm7cOOrXr8/EiROVAScNDAzkbyslI4TgypUrFC9ePEmlgy7psHTpUsaMGcOmTZv47bffiI+PT3FGAZDnrvR5Dhw4wJQpU+jWrRvu7u5K0kEXP+Lj4zE1NcXV1ZWrV6/i7e2tbPupe92fIekAMvEg/UDUajXbtm2jdevWdOnSJck0erpgExMTA0DGjBmxs7Pj2rVrvH79GvjrIUYGoK+jfPnyVKtWjapVq1KkSBEcHBxYv349t27donjx4jg6OnLs2DF27doFyN/9Z6ObtqxBgwaMGDGChIQExo0bx927d5WS1ytXrvDkyRM6depE69atcXBwYNasWTx69IjQ0NCfJlBLX48Qgri4OI4ePUrDhg3p2LFjkm5choaGxMTEEBkZiUajwcLCgm7dunH48GH27t2rv4b/JHLmzMnEiRNp1KgRzs7OHDhwQN9Nkr5Tr1+/5smTJ8qYPhqNRrmP2LJlCwsXLsTNzY28efOybt06fHx8lOSDJH2pkJAQVq9eTa9evXBwcEgy7aouYa37M3fu3HTs2JELFy4ozxo/+72uPPukH0ZUVBS3b9/GxsaGjBkzKg829+/fZ82aNfTt25dhw4YpD7q9e/cmMjKS+fPnAz9PtjG1FCpUiK5du3LixAn69evHtGnTuHLlCm5ubhw8eJBOnTqRK1cuDh48yLNnz/TdXCkVqdVqBgwYwMWLFwFo06YNjo6OxMfHM3HiRN69e8e6devYsGEDI0aMYPbs2UyaNAlTU1O2b99Os2bNGDFiBHFxcbJSRvosuj64169fx9DQkEyZMik3gjdu3GDatGk0b96cdu3aMWnSJF6+fEnZsmXp168f3t7ePH78WM978OPLmTMnzs7OtG3bFpVKpe/mSN+pzJkzkyFDBu7cuQOAqakpQgi0Wi2WlpYsW7aMTp06sXz5crJnz87SpUu5efOmnlstpXVqtZoXL15QuXJl0qdPr1Q5PHnyhB07djBlyhSmTZvGixcvSJ8+Pb/88gtXrlzh0qVLgKzUlBPWSj8MU1NTLCwsCAgIoGPHjsTFxXHw4EGmT59OeHg4lpaWqNVqzp49y5s3b+jbty+TJ09mxowZHDt2jAYNGuh7F9K06OhoHjx4QKlSpZRsb6NGjbh48SIjRoxgy5YtqFQq9u3bx+jRoxk4cCB16tRh7dq1+Pv7Y2Vl9dP0cfuZqdVqWrZsSaFChShatKjSt1bXLWr9+vW0adOGN2/esHr1auzs7JTjqW3btrx//57du3fTqFEjOWWm9Fl015eYmBgsLS0JDg7m7t27ZM+enRMnTjBr1ixiY2MpX748Go2GAwcOEBISwpIlS6hbty5//PEHV69exdraWt+78sPLlSsX7u7uSQaWlH5uMTExXLp0ierVq2NkZISxsTFVqlTh0KFDnDp1ijp16mBgYICxsTH169dXunBmzJiRZs2asWPHDvLly6fv3ZDSuLi4ON6/f09oaCjwMa6cOHGCGTNm8PLlS4yNjdFqtRw7doz58+dTsWJFOnTogKenJ7a2tuTPn1/Pe6Bf8g5fStN8fX05ePAg8LH7RM2aNfH396ddu3b07t2bMWPGkC9fPtzc3Dh9+jTr1q2jRo0aLF26lMDAQFQqFZkyZeLSpUtKhYT0+YQQuLq60qlTJ+bOncuNGzeUzzp27EjevHnZuHEjefLkYdCgQWzatIljx44RGBhIQkICLi4uPHjwQCYdfnC62SsKFizIrFmzyJYtW5LP27Rpg4ODAzly5CB//vzkypULIyMj4uPjSUhIwMzMjLx58zJw4EA5Zab0WXx9fRkxYgTx8fFkzpyZrl278scffzBo0CA6dOiAi4sLpUqVYubMmWzatAlvb2/s7e25dOkSd+/epUyZMhQoUIDly5cTFxen7935Kcikg5TYuHHjGDVqFIcPH1b60Ddv3pzIyEjWr1/P9evXlXV193MGBga8fv2agIAAihcv/j+n2JSklJw4cYK7d+8ihCBPnjzUr18fd3d3nJ2dGTJkCEOGDMHMzIzx48dz9uxZ5s2bh7GxMe7u7mi1Wuzt7cmRIwdHjx796SseEJKURvn6+gqVSiU2btwo4uPjhRBCfPjwQSxYsEB0795dNG/eXGzatEkEBgYm2W7dunWiZMmS4s6dO0IIIS5cuCAePXqU6u3/UcTGxgohhHj16pXw8vISZcuWFS1atBCbN29W1lm7dq1o1aqV8pvr1l+5cqVo3LixUKlU4unTp6nedin1REREiAYNGoiePXuKkJAQIYRQztv4+Hjx8OFDZV0/Pz/RunVr0bZtW3Hv3r0k60rS5/Lx8VFihVarVZafOnVKjB8/XgwYMEDs2bNHvHr1Ksl2169fFyqVShw/flwIIURCQoJ48eJFqrZdkqSP3r17J9q2bSsaN24s9u7dK+Li4oQQQmzdulWoVCrRp08fce7cuSTbBAcHi4kTJ4rq1asnuxeUpH9DFz8OHTqkLLty5YoYN26cqFmzpqhZs6ZYsmSJuHnzZpLtJk+eLCpWrCiCg4OFEEIsW7ZMBAUFpWrbv0dyOk0pTfL19WXy5MlMnjwZe3t75a2okZGRMu+3Wq3G3Nxc2SYhIYGEhASWLVvG6dOnWbhwIbly5ZJv2f8D3RvsXr160aNHD+DjaPE+Pj6cPHmSpk2b0q9fP0qUKMGAAQMIDQ3Fx8dH2V6j0fDy5UvSpUtHnjx59LUb0jem0Who2bIl8fHxeHt7Y2lpqZS9azQaOnfuTNOmTXF0dFQGlty1axfr16/H1NQUNzc3bGxs9LwXUlqkixUTJ06ka9euyabUi4+Px8DAIFkc0Gq1bN++nY0bN7J48WKKFSumj+ZLksTHGGJqakp4eDg9e/YkNjaWwYMH07RpU4yNjfH29sbNzY3s2bPTsGFDKleuzP3797l9+zY3b95k7dq1lChRQt+7IaUxvr6+uLq6MmHCBLp06YKhoaEyJpBarUaj0RAXF0euXLmUbXTxxcXFhWfPnrFo0aIkzyI/O/nEJaU5v/32Gy4uLkyYMEFJOgghMDIyIiwsTCnPNDMzQwiRpKzp9u3b7Nu3j0qVKpEnTx6ZdPgP1Go1rVu3xsrKisaNGyuD/NWrVw9XV1fc3d25cOECAwcOZNmyZUyYMIGEhAQWLVqkfIepqSmFChWSSYcf3Pv37ylWrBihoaFcv349SdKhffv2ALRu3RpTU1PlfG3Tpg29evXi7du3zJgxA41GIweSlD7Lzp07lQR1ly5dlFhhaGhIYGAgcXFxGBkZJZueNS4ujlu3brFx40Zq1Kghkw6SpAfx8fF8+PAB+GvgSAsLCzZs2ICpqSmLFy/m0KFDaLVaunbtysqVK6lUqRJHjhzBzc2Nw4cPY2lpyZYtW2TSQfpsvr6+uLi4MHbsWCVpnZi5uTnZsmUjV65cyotN+Ni9JyAgAH9/fypWrCiTDn8jKx6kNGX//v2MGjWK4cOHM3DgQOVBxMDAgP3797Nw4UI2b95Mzpw5k2z38uVLLly4wIoVKyhevLjy8Cv+f2A76fPoKh2srKyYM2cOlpaWKf6WISEhTJs2jT///JNMmTJRuHBhYmJicHJywtbWVk+tl/QhJCSEmTNncurUKRYvXkzlypVp164dGTNmZMGCBeTOnVtZN/Eb6T179lC+fHmsrKz01XQpDfr9998ZNGgQ/fv3Z9iwYUkqHfbt28eiRYuYM2cOZcuWTbLd3bt3uXz5Mps3b6ZIkSIsWbIEkLFCklJTZGQkgwYNwtjYmHr16lGtWrUk4/qEhobi6OhITEwMQ4cOpUmTJpiYmBAVFUVsbCzv3r0jd+7cmJqaKlV0kvRvHThwgJEjRzJlyhTs7e1JSEjAwMAAAwMD/Pz8OHXqlDIjXmKvX7/m+vXrzJkzB5VKxcKFCwEZPxKTI/dIacqlS5cwMDAgMjKSt2/fkiNHDuDjRWL06NE4OTkpy3QCAgKYOXMmcXFx1KhRAxcXFwA5g8IXUqvVdOjQgQIFCuDp6UmOHDmU3zIuLo6jR4/SrFkzEhISyJUrFx4eHpw8eRJfX19OnDgBQMWKFSlTpoz8/X8iuXLlYty4cSQkJDBkyBAyZsyIlZUV8+fPT1KmCB9HL79x4wZVq1alVatWemqxlJaZm5tjYmLCvXv3ePLkCYULF8bQ0DBJrChTpkySbUJCQnB0dCRv3rzUq1cPZ2dnQMYKSUpty5cv548//iB9+vScO3eOIkWKYG5uTpcuXbCxscHGxgZvb2969+7N4sWLSUhIoHnz5piZmWFmZkbWrFn1vQtSGqVWq9m8eTOZM2dWqhh01/8DBw4wceJE+vfvnyyZcPnyZebNm8eHDx+oVKkS06dPB2T8+DtZ8SClOVOnTuXw4cO0adMGZ2dnjh8/zuDBgxk5ciS//vprshM8IiKCo0ePkidPHuzs7AB5IfhSCQkJdO3alatXr+Lj45PkbaFGo6FVq1aULl0ad3d3MmTIoPzOQghiY2NZsmQJu3btYt26dRQtWlSPeyJ9SwkJCURGRnLr1i2yZs2KqampMgXhmzdv8PLyYufOnbi5udGpU6ck20ZGRuLh4cHRo0c5ePAgFhYW8k2B9EV0s1aUL18eT09Pzp8/z8iRIz8ZKwCuXbuGoaGhkpSQsUKSUp9Wq8XZ2ZmAgADs7OwoXLgw165d4/Lly0RHR1O7dm0aNmxI2bJl6devH1mzZqVbt27KmA+S9F/cu3eP2bNnExwcTNeuXenWrRtHjhxh2LBhjBo1ij59+iSLC3/++SdXrlyhUKFCNGzYEJDxIyUy8SClGbrBIwFcXFz4/fffKVOmDCdPnmTs2LF07949WcB5/fo12bNnT9I3S5Y8/Tf79+9n4sSJNGzYkKFDh1KgQAG0Wi1t27Ylffr0LFq0KEnZ/N9FRESQKVOmVGyxlJqio6OZP38+Fy9e5M6dOwBkyZKFPn360LFjR7Jmzcrr16+ZPn06p0+fZvbs2UqQjoyMZNasWezZs4ctW7ZQqlQpfe6K9AO4cOECgwYNIk+ePDx9+pRhw4bRr1+/ZOsFBgaSN29eMmTIoCyTsUKSUk9UVBTXrl2jfPnypE+fHq1Wy+DBgwkKCqJdu3b06dOHp0+fcuHCBXbv3s39+/cpVKgQhoaG3Lx5k0KFCuHk5ESTJk30vStSGqa77t+/f58ZM2YQGhpK6dKl8fPzY8yYMXTv3j1Z9x21Wk3GjBmTxAsZP1Im0zBSmqGbuQLAzc2Nhg0bcuLECSpVqqRkuRPn0W7evEnnzp05fvx4ku+RF4LPp9FolL83b94cDw8PDh48yPLly3n06BFt2rQhY8aMLFy48JNJB913yKTDj0utVtO1a1du3LhBzZo12bx5M66urpQtWxYvLy/c3d15/PgxlpaWTJo0iVq1auHs7MzRo0eVpMPu3bvx9vaWSQfpX/un9yfVqlVj+fLlvH//HktLS+rWrZtsnTt37tCuXTvmzZuXZLmMFZKUehYtWkSvXr04e/YssbGxGBsbs2TJEgoVKsSGDRtYu3YtlpaWdOnShZUrV7J//37s7OwoWLAg8PFFk4wb0n9lYGCAEILixYszYcIEsmXLxp49e6hbty69e/dOMgg2wI0bNxg2bBgBAQHJvkdKTlY8SGlO4soHNzc3Dh06RNu2benVq5cyvsPt27cZNmwY+fLlY8OGDfpsbpqn0Wjo27cv+fLlY8aMGcrygwcPMmbMGOLj4ylVqhRLlixJ1ldfrVazc+dOHBwcUrvZUirTzXJSoEABxo8fT7FixZTA++rVK/bv38/8+fNp2LAhkyZNInv27AQHBzNz5kzOnTtH8eLFuXv3Lps3b6ZkyZJ63hspLYmKisLMzOwfy1ovXrzIwIEDqVChAuPGjVMGqrt16xZDhw6lePHiLF++PDWbLUlSIuHh4UydOpUzZ84wc+ZMateuTbp06dBqtQwdOpTbt28rZe9/nyngypUr5MqVi3z58ump9dKPRlex8PDhQ6ZNm8abN2/o3r07Xbp0UT6/e/cugwcPJl++fGzatEnPLU4bZMWD9F06cOAAnp6eKX6WuPLBxcWFBg0a4Ofnx7p16wgNDeXx48cMHjyYwoULK0mHxNlJ6fNERERgZWWl3AzoNG3alAULFpAuXTosLS3RarVJtouMjGT27NnMmDGDoKCg1G62lIoiIyNp27YtOXPmxMvLi+LFi2NgYKAcE3ny5KFr166MGDGCw4cPs23bNgBy587NhAkTsLOz4/r162zZskUmHaTPcubMGbp168bjx48xNDT85LW+SpUqLFmyhCtXruDh4cGjR4+4ffs2Q4cOpWjRokrSQcYKSdIPCwsLpkyZQvXq1Rk3bhynT59WKh8WLVpEyZIl2bp1K97e3kRFRQEo94IVKlSQSQfpsx07dowzZ86k+Jmu8qFo0aJMmDCBnDlzsnnzZrZu3QrAw4cPGThwIMWKFVOSDjJ+/G+y4kH67mg0GpYsWcKKFSsYPHgwQ4cOTXG9lMZ8qFWrFmfPnqVEiRKsXLkSkIO7/Be6jG9ISAjr169n9+7dtGzZkvHjxyvrHDp0iNGjR9OkSROcnJzInz8/0dHRzJgxg3379smHyZ/A4cOHGT58OG3btmXw4MHkz58/xfVCQkJwd3fn3LlzbN26FRsbG2W5oaFhsmlwJel/8fb2Zu3ateTKlYsZM2ZQsGDBf7zmX7hwgWHDhmFtbc2LFy8oWbKkjBWS9B15//49kydP5ty5c3h4eCSpfBg2bBi3b9+mW7dudO3alYwZM+q7uVIaFR0dTf/+/bl69SorVqxQBp//u7+P+fDu3Tvq1q3L/v37KVKkiIwfn0tI0ncoJCRELFq0SKhUKuHl5fXJ9eLi4pS/T506VahUKjFs2DBlWXx8/Lds5g8v8e8XHBwsZs6cKezs7MSMGTOSrHfgwAFRqlQpMWrUKHH//n0xefJkUbZsWXHr1q3UbrKkJ+vXrxcqlUpMnTpVBAUFfXK9Xbt2CZVKJS5dupSKrZN+ZD4+PqJFixaic+fO4smTJ0KIf772X7hwQahUKtG3b19lmYwVkpR6IiMjxdmzZz/5eXh4uBg6dKioUKGCOHbsmHJ+arVaMXToUGFrayvWrVsnEhISUqvJ0g8oKChI9OvXT1SpUkWcO3fuk+vpjr/79+8LR0dHoVKpxKBBg5J9Lv1vMvEgfTcSEhKSJBLevHkjFi5c+D+TDzExMSIiIkII8fEBWEdeCL5MZGSkmDZtmjh//rx49epVks+eP38uZs6cKapVq5Zi8qFcuXKiQoUKomLFijLp8JNIfJ6tXbtWqFQqMWXKlGTJB925/fTpU6FSqcTevXtTtZ3Sj0N3zY+KilKWbd++/X8mHzQajQgKChJarVZZJ6X1JEn6tubOnStUKpU4ePDgJ9cJDw8XQ4YMEVWqVBH37t1TlsfFxYlRo0aJx48fp0JLpR9R4mv+s2fPRJ8+ff5n8iE2NlYI8TFZsWLFihS/S/rfZFcL6btw+fJlTpw4waNHj2jVqhVNmzYF4N27d3h7e7NkyRIGDBiAk5MT8FfpU1xcHKdOnWLz5s2MHDmSsmXLArLk6Uvppq86deoUpqamlCxZkkKFCtG6dWtKlCiBhYUF79+/Z/ny5ezevZtmzZoxadIkZfsDBw7g4eHBypUrlTJ66ceX+Hxbv349Hh4e2Nvb06dPH6ysrJKsu3HjRtavX8/mzZvJmzevPporpWFnz57l4MGDnD17lpEjR1K7dm2yZs0KgK+vLxs3bsTMzIxZs2ZRqFAhpUteXFwcJ0+eZMqUKbi7u1OvXj1AxgpJ0oeQkBDmzp3LkSNHmDFjBs2aNUtxveDgYIYMGYKJiQmbNm3C0NBQnq/SF7t58yZ//vknjx8/xt7eXrlPffHiBa6urty4cQMvLy+qV6+eZDuNRsO5c+fYt28fzs7OykDqMn58PvlrSXrn5+fH6NGjuX79OlZWVhQpUkQZlC579ux07dqVwYMHs3z5cubPnw98HPRFo9Fw9uxZJk6ciLGxsZJ0AOSF4AvFxsZia2tLsWLFMDY2platWty7d4/hw4fTunVrvLy8uHv3Lj169KBNmzacOHEiyYCTzZo149ChQzLp8BNIPJho4kH9HB0dGTduHNu2bWPNmjU8e/ZMWe/Vq1dcunSJ8uXLkyVLllRvs5S27dy5kzFjxhAdHU2bNm2oXLkyFhYWynSaHTt2pEePHkRFRTF27FgeP36MkZERMTExnDlzhqlTp6JSqZSkA8hYIUmpSRcncuXKxejRo6lfvz7jx4/nwIEDKa6fO3duWrRoQUhICO/evZPnq/TFdu/ezejRo9m+fTsJCQmEh4crx2O+fPmYOnUqZcqUYcSIEZw7d07ZTpd0GD16NBqNJsnsbfJ4/HzG+m6A9HPbs2cPkydPxsnJiaZNm6Y4KnH27Nnp1KkTAEuWLMHIyIihQ4dy7tw5xo8fT8WKFVm6dCkgs4//VcaMGenRowdmZmasX7+eO3fu4OfnR0BAALt37+bw4cOsXLmSatWqYWJiQoECBfjtt98AlAEnzczM9LkL0jcUFRXFokWLGDt2LMbGxkkGeNUlHwwNDXF0dATAw8MDAwMDevfuTZ48eVi6dCkBAQFs3LhRDgomfZYDBw7g6urKyJEjadmypTJ1sq76TXcsdurUCSEEmzdvZvz48UybNo3w8HDGjx9PhQoVWLZsGSBjhSTpQ+LzztLSUrlv0P2ZuPJBd27rpmWW56v0pXbt2sWkSZMYOnQo9evXp2jRosnWyZcvH66urri5uTFy5Ejmz59PpUqVlGeNqlWrsmjRIuCvY1P6fLKrhaQ3ujfprVq14tdff8XU1BT4mF00NTUlLi6Obdu20aNHD+BjaZ6Pjw/Lly+nfv36XLlyhTJlysgbyW8gIiKCHTt2sHDhQmrVqsWCBQsAePbsGcHBwWzbto0nT55w69YtANKlS8eJEyfIli2bPpstfWO7du1i3LhxNGnSRKk+Spx8gJS7XXTq1Am1Ws3vv//O1q1bKVGihD6aL6VRL168YNiwYVSrVo0hQ4aQIUMG4K9YodFoWLZsGXZ2dlSpUgWA7du34+3tTWxsLCEhIVSrVk3GCknSg+joaNasWcPNmzcJCgqiQIEC1KtXj1atWpE+fXrCw8Nxc3Pj+PHjTJ8+nUaNGin3g+/evWPy5MnExcWxYMEC+WJD+mxXr15l5MiR2Nvb4+jomOKzxu3bt7G1tUUIwfPnz5k6dSo3b96ke/fubN26lbJly8r48ZXIigdJb4KCgtBoNNStW1e5EGi1WuVGslu3bty4cYMnT54wefJkcuXKRadOnTAwMGDx4sX88ssv8kLwjWTKlIkOHToAsHTpUvr168fKlSuxsrLCysqKcuXKYWBgwKFDh3j48CEtW7aUSYefQN26dRk3bhxLlixh2LBhLFy4ECMjo2SVD7p/Ozo6YmRkxPTp0zE2Nua3336T3XCkz/bq1StevnxJrVq1lKRDQkKCEis6duzIvXv3CAwMxNTUlHLlytG5c2cMDAxYuHAh9erVY+7cucp2MlZIUupQq9XY29uTIUMGsmfPjq2tLRcuXODkyZP8/vvv9OnTh8qVK+Pi4oKhoSHjx4/nyZMn1K5dG7VazY4dO7h48SLe3t4y6SB9kWvXrpExY0YaNGigPGvExcUlix+LFy+mQYMG5M+fH1dXV2bOnMnixYupX78+S5YsAWT8+BpkxYOkNx4eHhw8eJBTp04lWR4XF8cvv/xC7ty5KVGiBGfPnqVu3bq4uroC8PLlS+7du0fdunUBeSH4ltRqNb/99hvLli2jfPnyLF++HPgrUwzJ33hLP57E59j79+/57bffWL58OXZ2dixcuBBIfhwIIYiOjsbMzIx9+/ZRrFgxVCqVXtovpU26ctYtW7awYMECDh06RLZs2ZJ0r2jVqhWZMmWiSZMmrFq1igoVKtCrVy8qVKgAwMWLF5UqCBkrJCn1xMbG0qtXL9KlS4erqyv58+fH2NiYwMBAzpw5w4IFC7C2tmbs2LFUrVqVyMhIli1bhre3N1qtlhw5cpA5c2Y8PDxkwlr6IkII+vbtS2xsLJs2bUrymUajoWXLlpiammJpacmVK1eYM2cODRo0QAjBkydPuHjxIp07dwZk/PhaZMWDlOp0Dyjp0qUjJiaG9+/fkyVLFuWkfvfuHVWqVMHV1ZX4+HiyZ8+uZLvHjBlD3rx5ldHw5YXg2zI3N1cqH5YtW8aAAQNYvny5Up5mYmIikw4/MN0DXnh4ONmyZSM+Pp4sWbLQtm1b4OMxkbjyQXdMADx9+pR169ZRtWpVWrRooc/dkNIoXR/a7Nmz8+HDB4KCgpJUVr19+xZ7e3saNmxI7ty5yZMnD+PGjSNdunTY2NhgZmYmkw6SpCeXL1/m9evXuLu7U7BgQeV8LlKkCIULFyZfvnw4OzuzatUqSpQoQebMmRk9ejQtWrTg3bt3ZMqUifz588tqSumz6O5bdNd8MzMzQkNDiYyMJH369Mo968mTJ8mUKRMrVqzgxYsXrFu3jiFDhrBq1Spq1aqFtbU11tbWgIwfX5P8FaVUc+/ePQDlpK9evTrv379n165dwMcSba1WS+7cufH09CRLlixkz56d5s2bky1bthSn3pMXgm9Pl3wYOHAgN27cUMbc0D1gSj+mqKgo5s2bR8+ePbG3t6dHjx4sW7aMFy9ekC1bNtq3b8+gQYM4f/48w4YNAz4eE/Hx8Tx79oy5c+eyfft2WeUgfbbr168r8QLA2tqa7Nmzs3r1at69e6c8wOTKlYuuXbsqo4w3btyYUqVKkTdv3mRl2TJWSFLq0Gg0ADx8+JDQ0FCqVq2KgYEBiQusDQwMaNiwIWPGjOHs2bPs3r1b+czGxoYaNWpQtmxZmXSQPtubN2+Av675xYoV49GjR7x8+VLpGgrQqFEjNmzYQPbs2SlbtiytWrXC3NycDx8+JPtOGT++HvlLSqnixo0b9O3bN8nUi3nz5qVSpUosXbqUo0ePAiQZKd/AwACtVsvLly/JmjWrknmUUp8u+eDg4MDLly959eqVvpskfUNqtZoOHTpw/vx5cuTIQZ06dXj//j2LFy/G3t6eP//8EwsLC9q1a8fAgQPx9/dXkg9hYWHMnDmTs2fPsmvXLooUKaLnvZHSCiEEz549o1OnTixbtowHDx4AoFKpqF27NseOHcPX11e5MdS9hdK93Tp79iwxMTFy8FJJ0hONRoO9vT1bt25VXiY9fvwYIMVZAGrVqkWxYsU4ePAgGo1Gmd5Qkr7E5cuXadmyJceOHVOW1a9fnyxZsjBy5EjCw8MxMjJSkmO62bV0XUNLlCgh71m+MZl4kFJF7ty5qVKlCqdPn8bT0xMAKysrHB0dMTExwdPTU5nHWVcRodFouH37NtOmTaNYsWJUr15db+2XPiYfunXrxo4dO8iTJ4++myN9IxqNhoEDB2JpaYmXlxdz585l4sSJ7NmzhwkTJmBqakr//v25fPkyFhYWtG3blgEDBuDv70+/fv1wd3fH398fb29v2S9X+iwGBgZYWVnh6urKmTNnWLVqFXfv3gVg5syZVK5cmWXLlrFhwwbevHmjJB00Gg3Xrl3D1dWVwoUL07RpUz3viST9nNRqNa9fvyY2NhaVSoVGo+HGjRsAypvmxKysrKhVqxZBQUHEx8fLN8vSf6LVailevDgzZszgxIkTABQvXpxOnTrx7Nkzhg4dSnh4uDJGGXw8Lq9fv878+fNRqVTyvuUbk4NLSt+cVqvF2NiYd+/eMXfuXC5fvkyDBg1wdnYGYM+ePXh5eREaGoqDgwM1a9Ykffr0yhvTokWLKrNXyLlzJenbunz5Mi4uLowdO5ZatWphaGiYZDDRQ4cO4enpSVRUFNu3b8fKyor379/j5+eHl5cX8fHx+Pr6yrfO0mfTxQoAX19fpk2bRuPGjenduzc2Njao1WqGDh2Kv78/JUqUoGPHjhgbG3P//n1OnTpF8eLFldHHZayQpNSlO+fGjx/P8+fPWbBgAX379uX58+f4+PhQsGDBFAejnjJlCteuXcPPz09PLZfSusTX+8uXL7N8+XLu37+Pq6sr9evXR6PRMG/ePLZv30727NmZOHEixYoVw8DAgLNnz7Jy5UqKFy8unzVSgUw8SN9MdHS0MvWZztu3b5k7dy5//vkn9evXZ+zYsQBKH7+DBw8CH29AS5cuTeXKlZV15OAukvTtbdu2jRkzZnDgwAHy58+vLE8ciL29vXFzc8PR0ZFRo0ZhYmJCeHg4e/fupU6dOhQoUEBfzZfSoIiICDJkyJCkqx0kTT706dNHGS9k/vz5XLhwgYcPH6LVaqlUqRLly5dn8ODBgIwVkpTaEp+3K1euZMOGDZw4cYIDBw7g5uaGpaUlK1eupECBAkosEUIQGhrKuHHjyJs3rzKlpnzgk75E4uv+xYsXWblyJffv38fFxYUGDRqg0Wjw8fHBz8+PW7dukT59erRaLYUKFaJSpUpMmTIl2fdIX59MPEjfxNGjR/H19aVVq1aULFmSwoULK5+FhISwYMECLl68SKNGjZTKh5iYGMLDw3nx4gWGhoYULFhQGVhIXggkKXV4e3szZ84cdu/eTYECBZKce4mTD/b29sTGxuLr66u8pZbnqfS5du/ezaZNm7C2tqZLly5YWlomSXht3boVDw8PGjVqRO/evZVKmsjISN6+fYuBgQGWlpakT58ekMegJKWmxDMZ6dy/f58ePXqwYsUKypUrx+LFi1mzZg3p0qXDzc2NEiVKYGVlxd27d/H29ubIkSN4e3snuU+UpH/j2LFjXLx4kU6dOpE1a1ayZ8+ufObv78/q1at58OCBknyIj48nJiaGCxcuEBUVRfr06bG2tqZo0aKAjB+pQSYepK/u4cOHdOnShYiICABKlCiBhYUFHTt2pESJElhbW/Phwwc8PT3x9/enQYMGSlVDSmTJkySlnhs3btClSxfs7e2ZNGkSkPQc1HW7WL16NevXr2fbtm3ky5dPnqPSZxFCEBYWRuPGjYmIiMDY2BgzMzOyZctG9erVsbOzo379+hgaGnLo0CHGjBlDs2bN6NmzJyVLlvzkd8rjUJJSR0xMDD179iQ6OpoqVapQo0YNChYsSMaMGWnZsiWDBg3C0dER+JhA9PHx4c6dO1hYWGBmZoapqSnx8fEsXLhQds2TPtvNmzeV6d6tra0xMTGhRYsWlC1blmrVqgFw+/ZtPD09efjwoZJ8+BQZP1KHTDxIX11UVBTLly/n7NmzxMbG0qZNGy5evMj169fRaDQ0btyY2rVrU6ZMGRYuXEhgYCA1atRg1KhRgMw4SpI+hYeH069fP4KCgnB1dVUG6vv7eTlr1ixOnTrFzp07lbfNkvS5zp8/z6RJk8ifPz/FixcnT548eHt7o1aryZgxI40bN6ZTp06cOnWKZcuW0bhxY7p27SoHAJMkPQsJCWHHjh08efKEJ0+eKOXrhQsXJigoiEqVKjF9+nQsLCwACA4O5sKFCwQGBhIdHU2FChUoX768HKxa+iJ3795lw4YNnDp1ity5c9OoUSPWrVtHQkIC1tbWNGjQgKZNm/L06VN27NhBQEAAU6dOpU6dOvpu+k9NJh6kryY4OJjMmTNjZmZGVFQUK1eu5OjRo9jY2DB37lweP37MsWPHOHr0KLdv36Z48eIYGhoSGRlJREQEzZo1Y8KECfreDUn66d25c4euXbuSP39+hgwZQuPGjZXPdG+qx48fT7Zs2Zg6dWqSEaIl6X+5desWpUqVUv59+vRpXFxcKF68OIMGDcLGxoY7d+7g4+PDjRs3ePjwIQ0bNuTs2bMYGBhQs2ZNJkyYQO7cufW4F5IkJRYYGMjr1685cuQIjx8/5vLly4wdO5aWLVsqyQdJ+q9CQ0OVbti67jq7d+/Gzc2NZs2acfbsWTZv3syTJ094/fo1tWvXJioqirdv3xIWFsb06dNl8kGPZOJB+iouX75Mnz59mDFjBvXq1SNDhgxERkayZs0aduzYoWS+06dPz7t374iKimLLli08fvyYU6dOAdChQwemTZum5z2RJAk+PgwOHz6cjBkz0rZtW3r16oWpqSmPHz/Gx8dH6Zcr57yWPsfjx49p2rQp7dq1Y8aMGcryU6dO4eLiQoECBRg2bBiVK1cG4N27d1y/fp3ff/+dW7ducfv27WTbSpKkH4kHivx7mfq0adPYunUrzs7OtG/fHnNzcz21UvpRHDlyhBUrVjB27FiqVKkCwL1791i3bh179uxhypQpdOrUCYAXL15w/vx5/P398ff3JywsDICuXbvi4uKit3342cnEg/RVREZGMnDgQAIDA5k8eTK1a9dWKh/WrFmDn58fpUuXZs6cOaRLlw74K2CdP3+ed+/e0bJlyyTLJUnSr5s3bzJhwgTu379PpkyZMDY2JmvWrAgh8PLykuXu0mcLCwvD19eXJUuW0K5dO1xdXZXPTp8+zeTJkylUqBC//vortWrVUj7TarVotVr8/f2pW7cuIGOFJH1v/n5Ouru7s23bNsaNG0ebNm3IlCmTHlsnpXU3btygY8eOVK5cmeHDh1OpUiUAHjx4wJo1a9i3bx/Ozs44ODgo22g0GtRqNQcPHiQuLk4Zd0TSD5l4kP6TxFMoRUVFMXz4cK5fv87UqVNTTD6UKVOGOXPmYGpqmuJoyHJ8B0n6voSGhnLv3j0CAgKIi4ujVKlSlClThly5cum7aVIaEhMTo4wFEh4ejp+fH56ennTq1OmTyYf+/ftTvXp1IPno+TJWSFLaMH36dDZt2oSrqyv29vYyWSj9J7dv36Zbt26UKFGCkSNHJkk+rF27lr179zJ+/Hi6desG/DUgduKYIeOH/sjEg/TFrl27xuXLl6lTp44yFc2/ST7Y2toya9asZBcCSZIk6cdz8eJFzp8/T968eZUy2Pfv37Nz585/TD4ULlyYfv36YWdnp6+mS5L0FcyZM4d27drJrnnSZ7t79y5PnjyhSZMmyrJbt27RvXv3f0w+TJgwga5duwKyOu57IhMP0hfZt28fixYtInPmzHTs2FG5mYSPyQcnJyeuXbuWLPmwdu1a/Pz8sLKyYvXq1RgbG+txLyRJ+jcSB20ZwKXPsWvXLubPn4+VlRUdO3akVatWymf/lHw4c+YMkydPJnPmzMydO5dixYrpo/mSJEmSnhw4cIDly5fz7t073NzcqF+/vlJp/W+SD05OTvz666963gspMZl4kD7b7t27mTx5Mn369KFx48ZKP28hBEIIZaYKJyenFCsfFixYAMD48eP1uRuSJEnSN3TgwAHGjx/P4MGDadiwIdbW1sDH8Rp0SeewsDB27dqFp6cnHTt2ZMqUKcr2x44d448//mDixIn6aL4kSZKkJ7t27WLq1Kl0796d+vXrU65cOeUzXQz5p+SDl5cXWbJkYebMmXraAyklMvEgfZYHDx7g5OREmzZt6NGjh9JnNyXR0dEMGTKEmzdv4ubmRq1atTAzM1P6W4F8eypJkvQjCg4OZtCgQfzyyy/069fvH2NFWFgYfn5+zJ07l86dO6c44riMFZIkST+H69ev4+TkRNeuXbG3t1dmREmpe/aNGzfo0aMHJUuWTJJ8CAkJUcaikvHj+yE710ufJTg4mKioKKpWrUr69OnR5a1evHjBmTNn8PLy4sSJEwQHB5MhQwaWLFmCra0tLi4uHDlyRCYdJEmSfgJqtZqXL19SuXJl0qdPT3x8PABPnz7Fz88Pd3d3PDw8CAkJIWvWrHTo0IExY8bg4+PDqFGjkn2fjBWSJEk/hzt37mBubk7jxo0xNzcnISEB+Di98sOHD9m1axdPnz7lw4cPlClThk2bNnH37l3mzZuHv78/gEw6fKdkB3vpszx+/JjQ0FDy588PfLwZPHPmDPPnz+fevXtotVoMDAxo2rQp/fv3R6VS4eXlhaOjIwEBAbRp00b5LnkhkCRJ+jFpNBrCw8P58OED8PHm79ixY8ycOZMXL15gZGREfHw8R44cYcGCBZQpU4ZWrVqhVqt58eKFnlsvSZIkpTZdkuDBgwfExsaSPXt2AAwNDblw4QJLly7l9u3bqNVqcuXKRdu2bXFwcFCSD+3btycgICDJgMTyWeP7IrtaSJ8lJCSEjh07UrhwYRo2bMjdu3fx9fUld+7ctGvXjkqVKnH58mWWLVvG4MGDGTJkCECSSgdJkiTpxxYeHs64ceO4evUqdevWJSwsjJMnT1KkSBFlkMnz588zb948LC0t8fb2xtDQkOjoaDJkyADIN1WSJEk/o2PHjjFkyBCcnJywtrbm3r17LF26lCxZstC0aVNKlSqFn58f169fZ/bs2TRr1gz4WH2dL18+Pbde+icy8SB9Fq1Wy4kTJ5g9ezbPnj3DyMiIbt260ahRI6VfFYCDgwMvX75kz549pE+fXumTJW8kJUmSfg5//vknPj4+nDt3DoAuXbrwyy+/UKpUKWWdiRMncvToUXbv3k2ePHmU5TJWSJIk/bwWLVrEkiVLlH+3bduWFi1aUKNGDeBjjKhRowZVq1bFy8sryfgPKY0FIX0fZFcL6bMYGxvTsGFDqlatyv3798mRIweFChVKsk5kZCQGBgbY2tpiZmaW5DN5IylJkvRj0yUNKlasiI2NDTExMWi1WqXPLfx1Y2hoaEjp0qXJmjVrku+QsUKSJOnnNXToUGrWrElwcDBWVlaUKlUqSVx49+4dmTJlUhLWiRMNMunw/ZKJBylF4eHhWFhYfPLzzJkzKxUOCQkJGBgYYGBggBCCW7duERISQsOGDVOptZIkSdL3IvHNoZmZGRkzZgSSxgpDQ0MCAgK4cOECrVu3/sdZLyRJkqSfT/ny5ZW/6+KHzv379wFQqVSp3i7py8mUkJTMzp07cXd3Jyws7F+tr7uRfP/+PefPn2fSpEmoVCq6d+8OgOzNI0mS9ONL6Vqf+EbR0NAQAwMDXr9+zfHjxxk3bhwlSpRQxgKSsUKSJEn6J1FRUVy8eJHJkydTunRpWrdure8mSZ9BVjxISfj6+jJ58mRcXV3/seLh765evYqHhweRkZGUK1eO2bNnA7KflSRJ0o8oMDCQ169fI4TAxsaGbNmyKVVv/9RN4vLly3h5efH+/XsqVqzIjBkzABkrJEmSfhbXr1/nwoULPH/+nO7du1O8ePH/uY2hoSEXL15k69atPHz4EFtbW+bOnQvI+JGWyMSDpNAlHSZNmkSnTp3+dR/buLg43r17h0qlonTp0nTs2BGQFwJJkqQf0d69e1mwYAHBwcFotVqqVq1K7969qVOnzv+MGwkJCdSpU4dChQrRqFEjZZmMFZIkST++Xbt2sXTpUjJnzkzevHkxNjb+V4MJx8TEcOfOHcLCwmjfvj2Ojo6AjB9pjZzVQgI+Jh2mTJmCs7Mz3bt3x8jISLkQPH36lEyZMpEtW7ZPbh8fH09cXJzST1deCCRJkn48Pj4+TJkyhUGDBlGsWDHev3+Pq6srZcuWxcvLi7x58/7P79BqtRgbf3zvIWevkCRJ+jns2rWLiRMnMnz4cBo1apRscHqdTz1DJCQk8OHDB6UiWz5rpD2y4kHi0qVLTJ48mSFDhtCzZ08SEhKUm8Hdu3cze/ZsVq1a9Y+JByMjI4yMjJR/ywuBJEnSj2Xfvn24uLjg4eFBs2bNMDU1BSBr1qwMHTqUBw8e/KvEgy7pAHL2CkmSpJ/BjRs3WLhwIcOGDcPR0VGJHxqNBlNTU7RaLSdPnqRu3boYGRmlmFQwNDRUkg5CCPmskQbJ/2IS0dHRFClShP379/Pq1StlALADBw4wYcIEunTpgo2Njb6bKUmSJOnJ8+fPWbp0KRYWFtjY2GBqakp8fDxarRZbW1vy5MmDgYEBUVFRSbaTRZWSJEk/L10MuHnzJpkyZaJRo0ZK0kGr1WJqaopGo8He3p5Jkybh6+tLfHw8hoaGJCQkfPJ7ZdI6bZJdLSS0Wi2XL1/G3d2duLg4Dhw4wOnTpyenzzEAACDdSURBVBk0aBAjR47k119/lVlFSZKk/2vvzsOqLBM+jn8Pizi4ABpigKgEmEmkhk5KqEkmYU2ETrnjgivKuEyAgksuE02W5ZLm8prZqKPoGKTSlDYojo0aWG6jZqjZq8QogorCgcP7RxdPnqRl6kX08Ptcl9fFeTbuRz3nvp/fuZdabuPGjaxfvx6AlJQU/P39ATh//jwRERG4urpSXFxMWFgYbdu2JSoqioqKChwdHTWkQkSkFouLi+Prr79m06ZNVtvNZjM9evSgUaNGODg4UFRURHR0NM8995xVT2qxDQoeaqlr165RWlqKxWKhcePGlJeXs3//fmbOnMnly5e5fPkyU6ZMoX///jg6Olqdm5ubS2FhIW3btq2ZwouIyG3x97//HYvFQnh4OPDtGN23334bOzs73nzzTZo2bcpTTz2FxWIhMDAQi8XC3r17uXjxIs2bN8fDw4P58+fTuHHjGr4TERG53SqHTEyePJmTJ0+SlpYGfDe/z549e9i4cSNz586lpKSESZMmcebMGeLi4nj22WdruPTy/01fY9dCu3btYvr06fz+979n3bp1XLp0CXt7ezp27MiMGTMICAigXr16PP744zg6Olp1dTp69CgxMTFs3bq1Bu9ARESq24YNG5gwYQJlZWWUl5cDEBkZyZAhQ7BYLIwdO5awsDDc3NxYunQpL7/8MvPmzSM1NZUVK1bQqlUrfHx8FDqIiNQy58+fN4ZMADz88MOcPHmSbdu2Ad8NlejQoQMvv/wydevWpVGjRiQkJFBUVGQMxxDbouChltm0aRMvvPACDg4O9O3blwEDBuDi4gJ8O2lLhw4dGD16NE2bNmXo0KHGnA/wbegwbtw4WrZsSVJSUk3ehoiIVKONGzcyY8YMEhMTiYiIMCb7gm/Dh8GDB1NRUcGlS5cYM2YMPj4+mEwmysrKuPfee3n00UdZsGABc+bMATTXg4hIbZGVlUX//v15//33jdA6KCiI+vXrs2bNGj7//HPjWAcHB5ycnLC3t6e0tJQzZ87wwAMP4OPjU1PFl2qk4KEW2b59O7NmzWLMmDEkJiYSExODm5ubsd9iseDg4ECHDh1ITk7G0dGR6Oho8vLyyM3NZezYsfj5+bFixQrjeBERsS2pqalMmzaNqVOnMmDAAOzs7IwZxC9fvgxAVFQU0dHRNG/enFdffZWTJ08C361odHP9oPkdRERqjzZt2lCnTh2WL1/O9u3bKSsrIzAwkKlTp5KTk8PixYv59NNPge/qDLPZzL///W/mz5+Pv78/Dz74YE3eglQTzfFQS+Tl5REXF0f79u0ZP348zs7OwHfL2JSWljJ9+nT69OlDcHAwZrOZAwcO8Kc//YmioiLjQ+Ott94CtHauiIgtSktLIz4+nmnTptG/f39MJpMRHGRkZLBnzx7i4uJwd3cHvpvzwcHBgZdeegl/f38FDSIitZTZbMbR0ZHLly8THR1NSUkJsbGxPPnkkzg4OLBmzRrmzp2Ln58fffr0ISIigkuXLnHgwAFWrVpFQEAAS5YsARRa2yI9OdYSBQUF5Obm0rlzZyN0sFgsRujQr18/tmzZwuzZs8nJycHR0ZHg4GCmTp2Ks7Mz7du3V+ggImLDbty4wd69ewFwd3c3GnyVyytPmDCBli1bcs8991gNuxgyZAhlZWWMHDmSvLw8NRRFRGqZsrIyABwdHSkrK8PV1ZXVq1fj5OTEokWLyMjIoKysjEGDBvHGG29gMplISUnhqaeeIioqis2bN9O1a1cjdLBYLKpLbJB6PNQSH374IRMmTODvf/87Xl5exnaLxcJjjz2Gh4eH8cYvKSlhxowZtG/fHrPZTG5uLgEBAcbxCh1ERGzThQsXeOWVV9i5cycpKSn07NmTbdu2MWnSJCZPnszw4cONOuDmb6P+8pe/8M033zBx4sSaLL6IiNxmO3fu5NChQ7Rr147OnTvj4OBg7Lt06RLR0dGUlpYyfvx4evbsiaOjI+fPn+ebb77hiy++wMXFhfvuu4+WLVsCetawZQoeaonMzExGjRrFqlWr6NSpE+Xl5cb6uBs2bKBr1654eHiQmZnJ3LlzcXFxYdWqVdSvX9+4hro8iYjYlqo+1/Py8vjTn/5EVlYWffr04d1332XChAlWoUOlixcv3rJqhRqNIiK1w2effcbzzz9vvO7YsSPNmjVj0KBBuLm54eHhQUFBASNGjKCwsJDx48cTERFhFU7cTM8atk0tg1oiODiY5s2b88Ybb1BSUoK9vb3RLeq5554zxuv+9re/pUWLFgQHB1uFDoA+CEREbIzJZKK8vJzS0lKKi4sB8PDwICkpiW7durF69WrCw8OrDB2OHj3KwIEDyczMtNqu0EFEpHYIDAwkLCwMFxcXQkNDcXV15fjx4/Tt25chQ4awYMEC8vLyWL16Nb/5zW9YvXo127ZtM1a7+P5E9XrWsG1qHdigykABvlvCzMnJifDwcA4fPszs2bO5ceMGDg4OxrF2dnZYLBZycnK4ePEirVq1qpGyi4jI7ZGdnc38+fN58skn6dGjBzExMaSmpmKxWGjSpAnx8fE8/fTT7Ny5kx07dlidW7m8sre3N127dq2hOxARkZqQl5dnfJG5YMEC2rVrx4ULF2jdujX/8z//w7x58wgJCWHdunX069ePCRMm0L59e7744gvWrVvH5s2bjdWSpPbQv7aN+eijj3jrrbfIzs4GvksOHRwcGDlyJI8++ihbt25l2rRpFBcXG12drl27xsGDB0lOTqZFixZERkbW1C2IiEg1S0tLIyEhgezsbIKDg+nevTuXL18mOTmZpKQkTp8+jYeHBwkJCYSGhhIfH8+HH34IwLFjx4iNjcXf35/ly5cDWl5ZRKS2yMnJISwsjJ07dxrhw6JFi/Dy8mLdunWkpqbSpUsXkpOT2bBhAwsXLsTOzo7jx49TUlJCTk4O58+fV++GWkhzPNiQ06dPExERgcViwc3NjcjISJ588kmCgoKMY65cuUJSUhL/+Mc/8PT0pFevXri4uHD06FGys7MJCAhg0aJFgMbpiojYoo0bN/Liiy8yfvx4wsPDad68OQBffvkl27ZtY+nSpXTv3p2EhAS8vLys5nyIjY3lL3/5C/fddx/Lli0DVFeIiNQmhYWFJCQkkJOTw5w5c+jSpQtOTk6UlZUxfvx4jhw5woABAxgwYIDVsO28vDz279/P6dOnGTduXA3egdQUBQ82xGKxMHLkSLKysggPD+ef//wn9vb2PPLII8TFxeHm5oarqytXr17l/fffJyMjg+PHj3Pjxg0eeeQR2rVrx8iRI41rqSEpImJbtmzZQlJSEsnJyfTp0wdHR0er/deuXSM1NZVXXnmFfv36kZSUBHzbYPzzn//M1q1b6datG0uXLgVUV4iI1EZFRUUkJyezZ88eUlJSbgkfjh07Rr9+/Rg0aBDOzs5VXkP1R+2j4MFGVL55c3JyGD16NP3792fgwIG89tprZGZmUlRUxGOPPUbfvn3p1KmTcd6FCxcwmUx4eHjcci0REbENFRUVnDt3jh49evDAAw/w+uuv4+PjY+y7ucvr5cuXWbBgAWvXrmX58uWEhoYCcO7cOfbv38+zzz4LqK4QEanNCgsLmTZtWpXhQ1xcHEePHjWeR5ydnVVniOZ4sBWVb2Rvb29at25NRkYGderUYfr06axfv56RI0eyZ88ehg0bRmJiIunp6QA0bdrUKnTQRC8iIrbHZDLRrFkz4uPjOXr0KG+//Tbnzp0z9t3M1dWViIgInJyc+Oyzz4zt3t7eCh1ERGqZCxcuVLndxcWF2bNnExISQmJiIrt27cJsNuPg4MDChQsJDAxk3bp1vPXWW5SWlqrOEAUPd6ubO6pUVFQYr93d3Rk4cCC5ubl88MEHODk54e3tzdNPP43ZbCY4OJisrCySk5Pp1asXp0+ftrquJnoREbE9lZM/Dhs2jISEBNauXcvKlSv56quvrI6rrEuCg4Px8fEhNzfX6vxKakCKiNi+zz77jG7duhlfWH7fzeHD1KlT+fzzzwGwt7fnjTfewNPTk+LiYurUqXM7iy13KIeaLoD8MiaTCYvFgslkwmw2U6dOHaO7bJcuXQgJCWHp0qX06tWLc+fOMXDgQEJCQnj99dc5f/48e/bs4ezZs7Ro0aKmb0VERKpZ5ZLJdnZ2DB06FJPJREpKChUVFQwfPpxmzZpZHX/27Fny8/Pp3bu3cb6IiNQunp6e9OjRg5kzZ2Jvb09ERMQtx7i4uDBz5kwmT55MQkIC77//PnXr1sXe3p41a9YY9cf3h/VJ7aPg4S508OBBdu/ezbZt2ygvL8fd3Z3hw4fToUMHGjRoQJ06dejWrRuvvfYaS5YsYd26dXTo0IEZM2bg6OhI8+bN8fHxMd786jIrImKbysrKjGWTbw4fhgwZAkBKSgqAET6YTCZKS0vZt28fXl5eVqsiiYhI7VAZEri7uzN9+nRSUlKYMmUKQJXhg5ubG8OHD+eFF15g//79hIaGUl5ejr29vdX1pHZT8HCXSUtLY/HixTRq1IiHHnoIs9nM4cOHiY2NpV+/fvTr1w9/f38GDRrE1q1bWbZsGU899RTJycm4uLgYb/qb3/wKHUREbEt2djbt27fHwcHBqvH3Y+FDTEwM3t7eHD9+nGXLlhEaGkr79u1r6hZERKSG3Pyc4O7uTmJiIkCV4UNlneLp6UlRURHXr18HMOqd719Pai8FD3eRyrXXx40bxxNPPIGvry8Aubm5bNiwgVWrVnH16lVGjRrFfffdR1RUFLm5uQQEBODq6lqzhRcRkdsiNzeXwYMHExISwltvvYW9vf3PCh/s7Ozo0qULs2bNolWrVkybNg3QN1UiIrXF0aNH+fLLLzl48CA+Pj60aNGCLl264O7uzrRp06ioqDDCh/DwcOzs7LCzs8NsNnPs2DG8vb2tJq0XuZmCh7tEWloa06ZNY/bs2fzud7/DycnJ2NeyZUsSEhKoV68eixYtwtPTkwkTJtC1a1dWrFjBp59+WoMlFxGR26lx48aMHz+eVatWERcXx4IFC34yfDCZTLz00kusXbuWsLAwFi9eDGgonohIbbFlyxYWLlxoTCZ84cIFKioqeOaZZxgwYABBQUHMmDEDk8lEYmIiBQUFhIeHU79+ffbt28err77Kww8/zEMPPVTDdyJ3KlPFzcsjyB3pxIkT/O53v6Nt27a8+uqreHl5Abd+C1VSUsKLL75IWloaa9euJSgoiE2bNpGUlMTatWvVZVZExEbdXJWbTCaKiopITU1lyZIldOrUiQULFgBYhQ/f984777B//34WLlwIKHQQEakttm/fTkJCAnFxcXTp0oWAgAD27dtHZmYma9euxc/Pj4kTJ9K5c2euXLnCa6+9xrp16/D19aW8vByz2UxgYKBR16innFRFwcNdYu7cuWzfvp3w8HBiYmJo2rRplcd98sknxMTEMHr0aMaNG8fhw4fZtWsXY8eOvc0lFhGRmlRQUMDmzZtZsmQJnTt3NhqEN084WVpayoEDB7h69SpPPPGEca5CBxER21dRUUFBQQFjx46lbdu2TJgwgbp16xr7S0tL+fjjj0lMTOSBBx5g7ty5xop4O3bs4OjRo1RUVODn52fM+6D6Q36IhlrcwfLz83F3dwcgKSkJBwcHtmzZAnw7A/m9995rHFuZLD7yyCM0adKE/Px8AAIDAwkMDAT0QSAiYos+//xzDh06xJEjR3BxceHhhx+mbdu23HPPPURFRWEymXjzzTeNYReVoYPZbGbPnj2MHz+eqKgoq+BBdYWIiO0zmUyYzWZOnDjB0KFDjdCh8rmiTp069OzZk5KSEqZMmcKmTZuYPHkyAGFhYYSFhVldT88a8mP0P+MOlZ2dTWhoKDt27DC2JSQkEBkZydatW1m5ciXnz58HrLsznTlzhitXrhAQEHDLNfVBICJiW/72t78RGxvL+vXryc7OZvPmzYwbN44hQ4Zw5MgR3Nzc6N27N2PGjGHv3r2MHz/eODczM5OpU6caE0qKiEjtsXXrVubMmUNBQQHFxcVW88d9f5hEly5dCAsLY8OGDZw9e5Yf6jCvZw35MfrfcYeqV68eoaGh/PGPfyQzM9PYXlX4UPnhYDab2bdvHz4+Pjz44IM1VXQREbkNPvjgA1588UWGDh3KkiVL2L59Ox999BGjRo3i8uXLREdHs3fvXlxcXHj22WcZPXq0ET5kZWUxY8YM2rZty5tvvglgTCgmIiK2q6KiArPZTHp6Orm5ubi4uACwb98+4Nu5gL7P1dWV7t27U1hYSElJieZvkF9EwcMd5tKlSwC0atWKhIQEQkJCiI2N/dHwIS8vD4Bjx46xYsUK2rVrR1BQUI2UX0REql9hYSEbN24kMjKSvn374u3tjclkokGDBkycOJGpU6dyzz33EBcXx6lTp2jUqBG9e/cmNjaW7OxsYmJiCAoKYsmSJYC6x4qI1BYmkwlHR0dCQ0M5fPgwzs7OhIeHs379ek6dOmWsglSpMpSunNvh+vXrNVFssQFqZdxBtm/fTlxcHLt37wbAz8+PP/zhD3Tr1u0nw4fMzEwmTZqEr68vycnJAD/YDUpERO5u169f59ChQ/j7++Ps7Gxsr2wgRkREMHr0aMrKynj55Ze5evUqrq6u9O7dm+eff97oJVF5jkIHERHbd/Ozga+vLzdu3ODixYtERUVhb2/PmDFjOHv2LPb29kZ9Urn88qFDh2jVqhUeHh41VXy5y6mlcYc4deoUEydOJDs7m/Xr1xvhg7+//0+GD++99x6jRo3Cz8/PqiGpblAiIrYpPz8fs9mMq6sr8O1QO/i2gVjZsIyMjOTxxx8nJyeHgoICABo2bEhMTAwJCQmAQgcRkdrk5meDjh070rBhQ3bt2kWXLl0YOnQo+fn5DB48mJycHIqLiwG4ceMGhw8fZvXq1QQHByt4kF9Mq1rcIe677z46derEv/71Ly5cuMA777yDnZ0dISEhRvgAEBsby+LFi+natSvwbfhQUlLClStXeOWVVwA1JEVEbJ2Pjw8NGzYkPT2dXr164ejoaEw0bDKZKC8vx97env79+/PBBx9w/PhxmjVrRkVFhdFDoqKiQnWFiEgtkJGRQWZmJo899hi+vr74+PhQp04dfHx8OHbsGABjx46lbt26rFmzhujoaB566CECAgLIz8/n2LFjtGrVimnTpgHWE9uL/FwKHu4AlQ3EUaNGYWdnh4+PD//85z9Zvnw5dnZ2dOrU6UfDh+nTpxvXUuggImL76tatS4cOHcjIyGDLli1ERkZiMpmMxqC9vT3wbf1iNpuNsOHmhqIajSIitu/atWukp6fzxRdfsHv3bi5evIifnx+BgYHUr1+fAwcO8L//+794enoybNgw2rZtS2ZmJh9//DEff/wx7dq1o2/fvgwfPhzQs4b8cgoeapjFYjEaiM2bN+fatWu0aNGCiIgIpk6dyrJlywCswgc7OzvGjRvHq6++arXuur69EhGpHZycnBg9ejQ7d+5k2bJl1K9fn8cff9xYk93R0RGLxUJubi6tWrWiadOmNV1kERGpAfXq1WPBggXY29tz6tQpcnNzOXr0KLt37+bKlSt8/fXX7Nq1i/DwcFxdXWnfvj3t27dn7NixlJWVUa9ePeNaCh3k1zBVaAbCGrF7925cXV1p06aN1Rs4PT2d5ORktm7dyldffcXMmTPx9PRk5MiRdOrUCYCTJ08ya9YsvL29eemll2rqFkREpIbt2bOHcePG0bhxYwYOHMiQIUMAKCsr4/Dhw/zxj3+kc+fOzJo1q2YLKiIiNaaqoREVFRX85z//YcWKFbz77ru88MIL9O7dmwYNGlR5joZXyK+l4KEGZGZmMmrUKEwmE8OHD8fX15eoqCgASktLiYuLw9/fn8mTJ/PBBx/w2muv4eXlxYgRI4zwIS8vT5O7iIgIBw4cYOLEieTn5+Pr68v9999PYWEhZ86c4f7772fRokWAGo0iIvKt7/dcmDVrFn/9619JSEggKiqK+vXr12DpxFapr8xtVlZWxokTJ/Dy8sLe3p6CggJWrlxJdHS0sWJFeHg47733HoWFhfTs2ZNJkyZx/vx5li9fzj/+8Q8AI3RQbiQiUrsFBwezfv16EhMT8fHx4fTp0zRp0oRhw4YZoYNWOhIRkUrfHy4xffp0+vXrx5///GfWrFlDSUlJDZVMbJl6PNSAoqIi/va3v7FmzRo8PDxISUlh3rx5fP311zg6OjJx4kQSEhIICwsjOTkZgI8++ojExERGjRrFiBEjavgORETkTnXjxg3q1q1rvNaYXBER+TleeOEFHBwcNJRbqoWChxpy5coVNm3axOLFiwkLCyMlJYXjx4+zYsUK9u7dS3FxMQ888ADz5s0zJgU7cuQIbdq0qeGSi4jInahyKIWGVIiIyK+lukT+vyl4qEFXr14lNTWVhQsXEhISwoIFCwDIysri8OHD2NnZMWLEiFve9Pr2SkREREREqoNCB6kOCh5qWGX48Oabb9K2bVtj+cySkhKcnJwAvflFRERERETk7qXg4Q5QGT4sWbKEdu3asXTpUuDbiSgdHBxquHQiIiIiIiIiv5yChztEZfiwdOlS2rVrx5IlS2q6SCIiIiIiIiK/miYKuEPUr1+fPn36MGbMGD7++GPefvvtmi6SiIiIiIiIyK+mHg93mCtXrnDw4EFCQ0NruigiIiIiIiIiv5qChzuYVq8QERERERGRu52CBxERERERERGpNvo6XURERERERESqjYIHEREREREREak2Ch5EREREREREpNooeBARERERERGRaqPgQURERERERESqjYIHEREREREREak2Ch5EREREREREpNo41HQBRERE5O6yefNmpkyZQmpqKg8++OAt+8+dO0dYWBjx8fEMHz4cgH/9618MHjy4yutFREQwf/58AAYNGsS+ffuqPK5ly5ZkZGQYr48fP87ixYs5dOgQ//nPf3B1dcXPz4/u3bszaNAgFi5cyKJFi37yfjp27MiaNWsAKC8vp2vXruTn57Ns2TK6du36g+ft3LmTDRs28Pnnn1NUVISzszP+/v6EhYXx3HPPUb9+fePY7t278/XXX1d5nUcffZSVK1f+ZDlFRETuVgoeRERE5LYZNGjQLWGFl5eX1eumTZsyadKkW85t0KCB8XN2djaDBw/G09OT3//+97i7u3P+/Hk+++wz3nnnHQYNGkSPHj3w8fExzikuLmbmzJn06NGDHj16GNvvuece4+dPPvmE/Px8vLy8SE9PrzJ4sFgsJCUlsXnzZgICAujfvz9Nmzbl2rVrHDx4kNdff53MzExWr15tdV7r1q0ZOnToLddr0qTJD/11iYiI2AQFDyIiInLbBAcHEx4e/qPHNGjQgGeeeeZHj1m6dCkNGjQgNTWVhg0bWu27ePEiAPfffz/333+/sf3SpUvMnDmTVq1a/eD109LSaNOmDZGRkcyfP5/i4mKcnZ2tjlmxYgWbN29myJAhJCYmYjKZjH3R0dF88803bNmy5ZZre3h4/OR9iYiI2CLN8SAiIiJ3nbNnz+Ln53dL6ADQuHHjX3TNGzdu8OGHHxIREcGTTz7JjRs32LFjh9Ux169fZ/ny5fj7+xMfH28VOlRq0qQJI0eO/EVlEBERsUXq8SAiIiK3zbVr17h06ZLVNldXV+zsvvsupLy8/JZjAOrWrWv0PvDy8iInJ4cTJ04QEBDw/1K2nTt3UlxcTK9evXB3d6djx46kp6fz9NNPG8d8+umnFBUVMWzYMOzt7f+r65eVlVV5X87OztStW/dXl19EROROpeBBREREbpupU6fesm3Hjh14e3sbr7/88ks6dep0y3HPP/88s2bNAmDYsGGMGDGCyMhIgoKCePjhh+nUqRO//e1vcXR0/EVlS0tLo127dtx7770A9OrVixdffJFLly7RqFEjo2wA/v7+VueWl5dTWFhotc3Nzc2qR0RWVlaV9zV58mT1kBAREZum4EFERERum9jYWIKDg622ubu7W7328vJizpw5t5zr4eFh/BwSEsL69etZtmwZWVlZ5OTksGLFCho1asScOXMICwv7r8pVUFBAVlYWU6ZMMbY98cQTzJo1i+3btzNgwAAArl69CkC9evWszj9x4gSRkZFW2/bu3WsEFgAPPfQQEyZMuOV3N2/e/L8qq4iIyN1GwYOIiIjcNgEBAXTu3PlHj3F2dv7JYwCCgoJYtGgRpaWl/Pvf/+ajjz7i7bff5g9/+ANbtmzBz8/vZ5dr27ZtmM1mWrduzZkzZ6x+R3p6uhE8VAYO165dszrfx8eHVatWAbBlyxbee++9W36Hm5vbz7ovERERW6PgQURERO5qderUISgoiKCgIFq0aMGUKVPIyMhg3LhxP/sa6enpAPTr16/K/V999RXNmjXD19cXgJMnT/L4448b++vVq2eECp9++ukvvRURERGbpOBBREREbEZgYCAA33zzzc8+56uvviInJ4eBAwfSoUMHq30Wi4X4+HjS09MZO3YswcHBNGjQgG3btjFq1CirSTFFRESkaqotRURE5K7zySefUFFRccv2zMxMAKNnws9R2dshJiaG8PBwqz8RERHG6hYAv/nNb4iJieHEiRPMmzevyjJUtU1ERKQ2U48HERER+UU2bdrE7t27b9n+307s+H1Xrlypco4EgGeeeQaAOXPmcP36dXr06IGvry9ms5ns7Gy2b9+Ol5cXUVFRP/v3paen07p1a2M1i+/r3r07s2fP5siRI7Rp04aRI0dy6tQpVq5cyZ49e3jiiSdo2rQpRUVFHDlyhIyMDBo3boyTk5PVdfLy8qq8r3r16lkN2xAREbE1Ch5ERETkF1m3bl2V2zt27PirrnvhwgXi4+Or3FcZPMTHx5ORkUFmZiZ//etfMZvNeHp60r9/f8aMGUPDhg1/1u86cuQIX375JWPHjv3BYx577DFmz55NWloabdq0wc7OjldeeYWePXuyYcMG3n33XYqKinB2dsbf35+JEyfy3HPP3bLyxbFjx6q8Ly8vLwUPIiJi00wV6g8oIiIiIiIiItVEczyIiIiIiIiISLVR8CAiIiIiIiIi1UbBg4iIiIiIiIhUGwUPIiIiIiIiIlJtFDyIiIiIiIiISLVR8CAiIiIiIiIi1UbBg4iIiIiIiIhUGwUPIiIiIiIiIlJtFDyIiIiIiIiISLVR8CAiIiIiIiIi1UbBg4iIiIiIiIhUGwUPIiIiIiIiIlJtFDyIiIiIiIiISLX5P235lMXIWz7PAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}